Это файл README библиотеки pm версии 2.1.ru.0.

В библиотеке реализованы регулярные выражения, грамматики, хитрые указатели и другие головоломные штуки.

Расшифровка названия библиотеки: puzzling modules (головоломные модули).

Библиотека целиком и полностью написана на языке C++ в стандарте 11.

Библиотека распространяется на условиях лицензии GNU GPLv3.
Текст лицензии можно найти, например, в файле LICENSE в этой папке.


= Требования =

Сборка библиотеки, обязательное требование:
- Компилятор C++, настроенный на стандарт хотя бы C++11.
 - Полная поддержка стандарта желательна, но не обязательна.
 - Например, компилятор gcc 4.8.5 не поддерживает C++11 полностью, но этот компилятор подходит.
 - Другие версии и другие компиляторы с неполной поддержкой C++11 не проверялись, но попробовать не запрещается: если скомпилируется, значит, работает.

Сборка библиотеки, рекомендуемое требование:
- Утилита cmake версии хотя бы 3.1.
 - Можно собрать библиотеку и без этой утилиты, но с ней сборка будет проще и удобнее.

Сборка документации:
- Утилита doxygen.
- Утилита dot для генерации графов в рамках doxygen.
 - Те, кто знаком с doxygen, могут избавиться от этого требования, отключив генерацию графов в файлах конфигурации Doxyfile и doxygen_layout.xml в этой папке.


= Инструкция по сборке =

== Сборка библиотеки утилитой cmake ==

Корректность инструкции проверена для утилиты cmake версий 3.5.1 и 3.5.2 и компилятора gcc/g++ версий 4.5.8 и 5.4.0.
Судя по документации к cmake, самая ранняя версия утилиты, для которой сборка должна производиться корректно, - 3.1.

=== Тем, кто знаком с cmake ===

Сборка производится обычным образом без всяких премудростей и тонких настроек.
Главный cmake-файл располагается в этой папке.
Цели, порождаемые при сборке:
- "pm"
 - Главная цель, вся библиотека.
- "grammar": модуль грамматик со всеми зависимостями:
 - Модуль грамматик по функционалу совпадает со всей библиотекой, так что зависимости - это все модули.
- "regexp": модуль регулярных выражений со всеми зависимостями:
 - Модуль возвратных потоков.
 - Модуль произвольных данных.
- "dataset": модуль совокупностей данных со всеми зависимостями:
 - Модуль произвольных данных.
- "stream": модуль возвратных потоков.
- "type_abuse": модуль произвольных данных.

В библиотеке содержится ещё один модуль: модуль вспомогательных средств.
Этот модуль содержит только заголовочные файлы и потому не перечислен в зависимостях и не имеет отдельной цели сборки.

=== Тем, кто не знаком с cmake ===

Пошаговая инструкция по сборке в терминале Linux для пользователей, не очень знакомых с утилитой cmake (<root> - эта папка):
- перейти в коревую папку исходных файлов библиотеки
    cd <root>
- создать подпапку build, если ещё не создана
    mkdir build
- перейти в подпапку build
    cd build
- сгенерировать make-файлы 
    cmake ..
- собрать библиотеку (собирается цель pm)
    make
- по необходимости собрать выбранный модуль библиотеки; в порядке перечисления команд: вся библиотека, модуль грамматик, модуль регулярных выражений, модуль совокупностей данных, модуль возвратных потоков, модуль произвольных данных
    make pm
    make grammar
    make regexp
    make dataset
    make stream
    make type_abuse
- если всё прошло успешно, то использовать файл статической библиотеки <root>/build/lib<имя_собранной_цели>.a

== Сборка библиотеки комплиятором ==

Для сборки библиотеки следуйте инструкциям используемых операционной системы и компилятора по сборке библиотек, и при этом (<root> - эта папка):
- Не забудьте флаг компилятора, включающий поддержку стандарта C++11.
 - В gcc это флаг "-std=c++11".
- Не забудьте сказать компилятору, что собирается не исполняемый файл, а объектный файл и/или сразу библиотека.
 - В gcc флаг сборки объектного файла - "-c", и требуется сначала собрать все объектные файлы и затем другой командой ("ar", если используется обычный Linux) создать по ним библиотеку.
- Не забудьте сказать компилятору, где располагаются заголовочные файлы библиотеки.
 - Это папка <root>/include .
 - В gcc это флаг "-I<root>/include" .
- Подайте на вход компилятору все файлы с расширением ".cpp", располагающиеся в подпапках папки <root>/src .

== Сборка документации ==

<root> - эта папка.

=== Тем, кто знаком с doxygen ===

Запустите утилиту doxygen из этой папки с конфигурационным файлом Doxyfile.
Согласно этому файлу просматриваются исходные файлы в папке <root>/src, и параллельно с ними - файлы документации в папке <root>/doc.

По умолчанию документация собирается в подпапке <root>/build/doc - если этой подпапки нет, то рекомендуется создать её или хотя бы папку <root>/build: обычно утилита doxygen хорошо создаёт подпапку существующей папки, но плохо создаёт папки, вложенные в несуществующие.

Если хочется что-то изменить в настройках документации, то измените файлы Doxyfile (конфигурация) и doxygen_layout.xml (структура разделов) в этой папке.

=== Тем, кто не знаком с doxygen ===

Пошаговая инструкция по сборке в терминале Linux для пользователей, не очень знакомых с утилитой doxygen:
- перейти в корневую папку исходных файлов библиотеки
    cd <root>
- создать подпапку build, если ещё не создана
    mkdir build
- запустить сборку документации с конфигурацией, записанной в файле Doxygen
    doxygen Doxyfile
- если всё прошло успешно, то открыть в браузере файл <root>/build/doc/html/index.html


= Структура исходных файлов =

В этой папке (<root>) - корневой папке исходных файлов библиотеки - располагаются:
- Файл README_ru с краткой выжимкой основной информации о библиотеке (этот файл).
- Файл README, дублирующий README_ru на английском языке.
- Файл LICENSE с текстом лицензии GNU GPLv3.
- Файл CMakeLists.txt - главный cmake-файл для сборки библиотеки.
- Файл Doxyfile - конфигурационный файл сборки документации для утилиты doxygen.
- Файл doxygen_layout.xml, содержащий описание структуры разделов документации для утилиты doxygen.
- Подпапка include, содержащая все подключаемые заголовочные файлы библиотеки.
- Подпапка src, содержащая все компилируемые файлы библиотеки.
- Подпапка doc, содержащая все исходные файлы документации библиотеки.
