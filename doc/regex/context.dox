/*! \file include/pm/regex/context.hpp
 *  \brief Содержит класс регулярных контекстов разбора pm::regex::Context.
 *  \ingroup ModuleRegex
 */

/*! \class pm::regex::Context
 *  \brief Класс регулярных контекстов разбора.
 *  \ingroup ModuleRegex
 *  
 *  
 *  Используется в методах \ref pm::regex::Regex "регулярных выражений".
 *  
 *  Состоит из:
 *  - \ref pm::regex::StringContext "строкового (под)контекста";
 *  - \ref pm::regex::DataContext "(под)контекста данных".
 *  
 *  С учётом вложенности полей *содержит*:
 *  - \ref DTypes "флаг" строки (= флаг строкового подконтекста);
 *  - флаг данных (= флаг подконтекста данных);
 *  - \ref DTypes "строку" (= строка строкового подконтекста);
 *  - текущие \ref pm::data::Data "данные" (= текущие данные подконтекста данных);
 *  - аккумулированные данные (= аккумулированные данные подконтекста данных).
 *  
 *  *Смысл контекста* с точки зрения \ref pm::regex::Regex "процедуры регулярного разбора":
 *  - Флаги не изменяются разбором.
 *  - Разбор неуспешен => содержимое контекста не изменяется.
 *  - Разбор успешен =>
 *   - Флаг строки опущен => строка контекста не изменяется.
 *   - Флаг строки поднят => в строку контекста записывается \ref ParseProcedure "принятая строка".
 *   - Подконтекст данных изменяется согласно процедуре разбора.
 *  
 *  Особые свойства класса
 *  ==
 *  
 *  \ref DValidState "Стандартно-корректен".
 *  
 *  Неявные методы
 *  ==
 *  
 *      Context()
 *  
 *  Инициализировать контекст, содержащий опущенные флаги, пустую строку и пустые данные.
 *  
 *  
 *      Context(const Context & context)
 *  
 *  Инициализировать контекст, содержащий копию содержимого контекста \p context.
 *  
 *  \pre Типы объектов, хранящихся в непустых данных контекста \p context, \ref DObjectModification "копируемы".
 *  
 *  
 *      Context(Context && context)
 *  
 *  Инициализировать контекст, содержащий перемещение содержимого контекста \p context.
 *  
 *  
 *      Context & operator =(const Context & context)
 *  
 *  Перезаписать содержимое контекста \ref DSelf "self" копией содержимого контекста \p context.
 *  
 *  \pre Типы объектов, хранящихся в непустых данных контекста \p context, \ref DObjectModification "копируемы через присваивание".
 *  
 *  
 *      Context & operator =(Context && context)
 *  
 *  Перезаписать содержимое контекста \ref DSelf "self" перемещением содержимого контекста \p context.
 *  
 *  
 *      ~Context()
 *  
 *  Уничтожить контекст.
 */

/*! \fn data::Data & pm::regex::Context::data(Target t = cur)
 *  \brief Вернуть ссылку на данные контекста \ref pm::regex::Target "по цели" \p t (по умолчанию - текущие данные).
 */

/*! \fn const data::Data & pm::regex::Context::data(Target t = cur) const
 *  \brief Вернуть ссылку на данные контекста \ref pm::regex::Target "по цели" \p t (по умолчанию - текущие данные).
 */

/*! \fn bool & pm::regex::Context::data_flag()
 *  \brief Вернуть ссылку на флаг данных контекста.
 */

/*! \fn bool pm::regex::Context::data_flag() const
 *  \brief Вернуть значение флага данных контекста.
 */

/*! \fn std::string & pm::regex::Context::str()
 *  \brief Вернуть ссылку на строку контекста.
 */

/*! \fn const std::string & pm::regex::Context::str() const
 *  \brief Вернуть ссылку на строку контекста.
 */

/*! \fn bool & pm::regex::Context::string_flag()
 *  \brief Вернуть ссылку на флаг строки контекста.
 */

/*! \fn bool pm::regex::Context::string_flag() const
 *  \brief Вернуть значение флага строки контекста.
 */

/*! \var pm::regex::DataContext pm::regex::Context::dc
 *  \brief Подконтекст данных.
 */

/*! \var pm::regex::StringContext pm::regex::Context::sc
 *  \brief Строковый подконтекст.
 */
