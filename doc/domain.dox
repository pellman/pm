/*! \file include/pm/domain.hpp
 *  \brief Содержит класс доменов pm::Domain.
 */

/*! \class pm::Domain
 *  \brief Класс доменов.
 *  
 *  
 *  *Домен* - это \ref DSet "множество" Dom *имён* (\ref DTypes "строк"), пронумерованных \ref DTypes "индексами" 0, 1, ..., |Dom|-1 (неравные строки - неравными индексами).
 *  
 *  Для строки name и домена Dom:
 *  записью Dom[name] обозначается номер имени name.
 *  
 *  Особые свойства класса
 *  ==
 *  
 *  \ref DValidState "Стандартно-корректен".
 *  
 *  Специальные методы
 *  ==
 *  
 *      Domain()
 *  
 *  Инициализировать пустой домен.
 *  
 *  
 *      Domain(const Domain & dom)
 *      Domain(Domain && dom)
 *  
 *  Инициализировать домен, содержащий такие же имена и нумерацию, как и \p dom.
 *  
 *  
 *      Domain & operator =(const Domain & dom)
 *      Domain & operator =(Domain && dom)
 *  
 *  Сделать \ref DSelf "self" доменом, содержащими такие же имена и нумерацию, как и \p dom.
 *  
 *  \return Self.
 *  
 *  
 *      ~Domain()
 *  
 *  Уничтожить домен.
 */

/*! \fn size_t pm::Domain::operator [](const std::string & name) const
 *  \brief Вернуть номер имени \p name, по необходимости добавив имя в домен.
 *  
 *  Если имя \p name не содержится в домене и домен содержит N имён, то:
 *  - имя \p name добавляется в домен, и ему присваивается номер N;
 *  - номера остальных имён домена не изменяются.
 *  
 *  Как следствие, при любом многократном использовании операторов индексации номер каждого имени остаётся неизменным (и определяется во время первой индексации по этому имени).
 *  
 *  \return Номер имени \p name в домене.
 */

/*! \fn std::vector<size_t> pm::Domain::operator [](const std::vector<std::string> & names) const
 *  \brief Вернуть вектор номеров имён из \p names, по необходимости добавив эти имена в домен.
 *  
 *  Эквивалентно вызову оператора индексации для каждого имени из \p names в неспецифицированном порядке и возврату вектора полученных номеров в том же порядке, как имена расположены в \p names.
 */
