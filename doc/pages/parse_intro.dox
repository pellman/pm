/*! \page ParseIntro Пара слов о разборах, регулярных выражениях и грамматиках
 *  
 *  
 *  \tableofcontents
 *  
 *  Если Вы захотели использовать библиотеку, то скорее всего Вам уже известно в общем и целом, что и зачем обычно "разбирают" и что такое "регулярное выражение" и "грамматика".
 *  На этой странице даётся краткое пояснение этих терминов, взятых в кавычки, в целом и применительно к библиотеке.
 *  
 *  \section PIParsing Пара слов о разборах
 *  
 *  Разбираются обычно тексты - последовательности букв.
 *  Собственно разбор - это процесс исследования текста, преследующий две цели:
 *  1. Изучение текста на предмет соответствия его заданному ("правильному") виду:
 *   - правильные ли используются буквы;
 *   - правильно ли из букв строятся слова;
 *   - правильно ли слова соединены между собой.
 *  2. Извлечение "смысла" правильно построенного текста.
 *  
 *  В библиотеке такой разбор производится при помощи \ref MRegex "регулярных выражений" и \ref MGrammar "грамматик".
 *  
 *  \subsection PIPTexts Буквы, тексты и потоки
 *  
 *  В библиотеке под буквами понимаются \ref DTypes "стандартные символы", а разбираемые тексты прочитываются из \ref DTypes "стандартных потоков ввода".
 *  На всякий случай следует отметить, что стандартный поток ввода - это базовый класс, на основе которого определяются потоки, позволяющие прочитывать тексты, по большому счёту, из чего угодно - например:
 *  - из основного входного потока программы std::cin - обычно это клавиатура, но в общем может быть что угодно, лишь бы было потоком и подавалось на вход программы;
 *  - из файлов (файловые потоки std::ifstream);
 *  - из строк (строковые потоки std::stringstream).
 *  
 *  \subsection PIPStreams Перепрочтение букв потоков
 *  
 *  Один из недостатков стандартных потоков ввода - это отсутствие нормальной возможности перепрочтения ранее прочитанных символов.
 *  Для "отмены прочтения" символов есть, например, методы std::istream::putback и std::istream::unget, но документация этих методов говорит, что в общем случае они могут выполниться неуспешно и не сделать ничего полезного.
 *  Для устранения этого недостатка, а также для упрощения интерфейса работы с потоками, предназначен \ref MStream "модуль потоков разбора", основа которого - \ref pm::stream::Stream "класс потоков разбора", надстраивающихся над произвольным стандартным потоками ввода, запоминающих (буферизующих) прочитанные символы и позволяющих повторно прочитывать запомненное с нужного места.
 *  Понятие разбора текста, адаптированное к потокам разбора и общим особенностям разбора в библиотеке, оформлено как \ref ParseProcedure "процедура разбора".
 *  
 *  \subsection PIPGeneration Извлечение смысла из текста
 *  
 *  Под "смыслом" текста может пониматься, по большому счёту, что угодно.
 *  В частности, этот "смысл" может означать, что в заданные моменты исследования должен выполняться заданный код, или что по итогам исследования должны быть сгенерированы заданные структуры данных, соответствующие тексту.
 *  В библиотеке при желании можно делать и то, и другое.
 *  
 *  Основа генерации структур данных - это \ref MData "модуль данных", которым предоставляется \ref pm::data::Data "класс данных" - контейнер, в котором может содержаться не более одного объекта практически произвольного типа.
 *  При этом наличие, значение и тип содержащегося объекта могут практически произвольно изменяться кодом программы.
 *  В частности, в этот контейнер можно добавить структуру данных того типа, который хочется сгенерировать в результате разбора, и произвольно изменять её в процессе разбора специальными методами.
 *  
 *  В более сложных случаях при разборе может понадобиться много структур данных:
 *  несколько независимых целевых структур, и всякие промежуточные и вспомогательные структуры.
 *  Для единообразной работы с произвольным (неограниченным) числом структур предназначен \ref MSet "модуль совокупностей данных", которым предоставляются:
 *  - \ref pm::set::Set "класс совокупностей данных" - по большому счёту векторов (std::vector) \ref pm::data::Data "данных", но с точки зрения пользователя - неограниченного размера (самоудлинняющихся при необходимости и не меняющих при этом расположение данных в памяти).
 *  - \ref pm::set::Definition "класс функциональных описаний", предназначенных для единообразного использования и преобразования данных совокупностей и, при желании, вызова любых функции, в том числе с "побочными эффектами", изменяющими объекты, не связанные с совокупностями данных.
 *  
 *  \section PIRegex Пара слов о регулярных выражениях
 *  
 *  Термин "регулярное выражение" часто используется для обозначения объекта (средства, функции, ...), позволяющего делать "несложную" логически целостную часть \ref PIParsing "разбора" текста - например, понять, записано ли дальше в тексте:
 *  - слово из заданных символов, и совпадает ли оно с каким-либо "ключевым" словом, и либо предоставить это слово, либо просигнализировать о совпадении;
 *  - какое-либо число, и предоставить это число.
 *  
 *  \ref pm::regex::Regex "Регулярные выражения", позволяющие выполнять такой (несложный) разбор, предоставляются \ref MRegex "модулем регулярных выражений".
 *  
 *  \section PIGrammar Пара слов о грамматиках
 *  
 *  Термин "грамматика" часто используется для обозначения объекта (средства, функции, ...), содержащего описание правил, по которым слова сложного структурированного текста стыкуются вместе, образуя смысловые конструкции, и позволяющего выполнять \ref PIParsing "разбор" текста согласно этим правилам.
 *  Примеры таких структурированных текстов:
 *  - запись выражения какого-либо языка программирования ("!b && (x == 3)"), и в целом код программы на этом языке;
 *  - текстовый формат входных данных какой-либо программы (например, xml, html, csv-таблицы, текстовые представления графов и тому подобное).
 *  
 *  \ref pm::grammar::Grammar "Грамматики", из которых получаются объекты, производящие такой (сложный) разбор, предоставляются \ref MGrammar "модулем грамматик".
 *  
 *  Один из типовых элементов грамматики - это описание "пробельных конструкций": конструкций, игнорируемых при исследовании текста и предназначенных в основном для разделения смысловых блоков текста и для повышения его наглядности при его "ручном" исследовании.
 *  Такими конструкциями являются, например, некоторые невидимые символы (пробел, табуляция, перевод строки) и комментарии.
 *  В грамматиках, предоставляемых библиотекой, для описания пробельных конструкций можно использовать произвольные \ref pm::regex::Regex "регулярные выражения", в том числе выражения, обозначающие \ref MRGivenLetterSet "любой из символов заданного множества" (множества игнорируемых невидимых символов).
 *  
 *  При разборе текстов грамматиками, как правило, требуются заведение многих непохожих структур данных (например, абстрактные синтаксические деревья, числа для подсчёта чего-нибудь промежуточного, таблицы идентификаторов с указанием типов, значений, областей видимости и тому подобного) и полная свобода преобразования значений этих структур.
 *  Библиотекой \ref PIPGeneration "предоставляются такие возможности" единообразной свободной работы с "хаосом структур" в рамках использования грамматик.
 */
