/*! \page MSet Совокупности данных
 *  
 *  
 *  \tableofcontents
 *  
 *  \ref pm::set::Set "Совокупность данных" используется в качестве \ref ParseProcedure "контекста разбора" в \ref pm::grammar::Nonterminal "процедуре грамматического разбора".
 *  
 *  Некоторые \ref pm::grammar::Definition "нетерминальные описания", \ref MGSpec "реализованные в библиотеке", предназначены для преобразования совокупности данных.
 *  Для задания способа такого преобразования используются \ref pm::set::Definition "функциональные описания".
 *  
 *  Смысл функционального описания определяется \ref pm::set::Definition "процедурой преобразования данных", соответствующей описанию на заданном \ref pm::set::Domain "домене": \ref DSet "множестве" имён (\ref DTypes "строк"), пронумерованных \ref DTypes "индексами".
 *  
 *  Далее документируются все функциональные описания, которые можно получить средствами библиотеки.
 *  
 *  \section MSSpec Особенности документации
 *  
 *  \anchor MSSpecInterface
 *  Документируемые \ref pm::set::Definition "функциональные описания" возвращаются вызовами функций и операторов *интерфейса создания*.
 *  Все эти описания находятся в пространстве имён pm::set.
 *  
 *  Для возвращаемых функциональных описаний документируется устройство \ref pm::set::Definition "процедуры преобразования данных", *соответствующей* описанию на заданном \ref pm::set::Domain "домене".
 *  
 *  Используемые обозначения:
 *  - \anchor MSSpecDom Dom: домен.
 *  - \anchor MSSpecDS DS: \ref pm::set::Set "совокупность данных", посылаемая на вход процедуре преобразования данных.
 *  
 *  Пункты документации выражения:
 *  - \anchor MSSpecParameters *Параметры*: составные части описания, значения которых фиксируются при создании и влияют на соответствующую процедуру преобразования данных.
 *  - \anchor MSSpecConditions *Условия преобразования*: ограничения на момент начала выполнения соответствующей процедуры преобразования данных, при которых это выполнение корректно.
 *  - \anchor MSSpecActions *Преобразование*: устройство соответствующей процедуры преобразования данных.
 *  
 *  \section MSDocGeneral Общие описания
 *  
 *  \subsection MSUniversal Универсальное описание
 *  
 *  \ref MSSpecParameters "Параметры":
 *  - \ref pm::set::Definition "имена данных" name1, name2, ..., namek;
 *  - функция f сигнатуры void (pm::data::Data &, pm::data::Data &, ..., pm::data::Data &) с k аргументами.
 *  
 *  \ref MSSpecActions "Преобразование": выполняется вызов f(\ref MSSpecDS "DS"[\ref MSSpecDom "Dom"[name1]], DS[Dom[name2]], ..., DS[Dom[namek]]).
 *  
 *  <table>
 *  <tr>
 *    <td>\ref MSSpecInterface "Интерфейс создания"
 *    <td>Типы аргументов
 *    <td>Подключающие заголовочные файлы
 *  <tr>
 *    <td>fun(f, name1, name2, ..., namek)
 *    <td>
 *      std::function\<void (pm::data::Data &, pm::data::Data &, ..., pm::data::Data &)\> f
 *      
 *      std::string name1
 *      
 *      std::string name2
 *      
 *      ...
 *      
 *      std::string namek
 *    <td>
 *      include/pm/set/definitions/universal.hpp
 *      
 *      include/pm/set/definitions.hpp
 *  </table>
 *  
 *  \subsection MSGeneralRef Общее ссылочное описание
 *  
 *  \ref MSSpecParameters "Параметры":
 *  - \ref pm::set::Definition "имена данных" name1, name2, ..., namek;
 *  - типы T1, T2, ..., Tk;
 *  - функция f сигнатуры void (T1, T2, ..., Tk).
 *  
 *  \ref MSSpecConditions "Условия преобразования": для всех i \ref pm::data::Data "данные" \ref MSSpecDS "DS"[\ref MSSpecDom "Dom"[namei]] непусты и хранят объект \<DS[Dom[name1]]\>, тип которого - \ref DQualifiers "основа" типа Ti.
 *  
 *  \ref MSSpecActions "Преобразование": выполняется вызов f(\<DS[Dom[name1]]\>, \<DS[Dom[name2]]\>, ..., \<DS[Dom[namek]]\>).
 *  
 *  <table>
 *  <tr>
 *    <td>\ref MSSpecInterface "Интерфейс создания"
 *    <td colspan="2">Типы аргументов
 *    <td>Пояснения
 *    <td>Подключающие заголовочные файлы
 *  <tr>
 *    <td>uref<T1, T2, ..., Tk>(f, name1, name2, ..., namek)
 *    <td>
 *      std::function\<void (T1, T2, ..., Tk)\> f
 *    <td rowspan="2">
 *      std::string name1
 *      
 *      std::string name2
 *      
 *      ...
 *      
 *      std::string namek
 *    <td>
 *    <td rowspan="2">
 *      include/pm/set/definitions/general.hpp
 *      
 *      include/pm/set/definitions.hpp
 *  <tr>
 *    <td>ref(f, name1, name2, ..., namek)
 *    <td>
 *      AnyT (*f)(T1, T2, ..., Tk)
 *    <td>
 *      Значение, возвращаемое вызовом функции f, игнорируется.
 *  </table>
 *  
 *  \subsection MSGeneralRet Общее возвращающее описание
 *  
 *  \ref MSSpecParameters "Параметры":
 *  - \ref pm::set::Definition "имена данных" ret_name, name1, name2, ..., namek;
 *  - типы RetT, T1, T2, ..., Tk;
 *  - функция f сигнатуры RetT (T1, T2, ..., Tk).
 *  
 *  \ref MSSpecConditions "Условия преобразования":
 *  - Для всех i \ref pm::data::Data "данные" \ref MSSpecDS "DS"[\ref MSSpecDom "Dom"[namei]] непусты и хранят объект \<DS[Dom[namei]]\>, тип которого - \ref DQualifiers "основа" типа Ti.
 *  - Тип RetT \ref DObjectModification "уничтожим".
 *  
 *  \ref MSSpecActions "Преобразование":
 *  - Выполняется вызов f(\<DS[Dom[name1]]\>, \<DS[Dom[name2]]\>, ..., \<DS[Dom[namek]]\>).
 *  - Данные DS[ret_name] \ref pm::data::Data "перенаполняются" значением, возвращаемым вызовом.
 *  
 *  <table>
 *  <tr>
 *    <td>\ref MSSpecInterface "Интерфейс создания"
 *    <td colspan="2">Типы аргументов
 *    <td>Подключающие заголовочные файлы
 *  <tr>
 *    <td>uret<RetT, T1, T2, ..., Tk>(f, ret_name, name1, name2, ..., namek)
 *    <td>
 *      std::function\<RetT (T1, T2, ..., Tk)\> f
 *    <td rowspan="2">
 *      std::string ret_name
 *      
 *      std::string name1
 *      
 *      std::string name2
 *      
 *      ...
 *      
 *      std::string namek
 *    <td rowspan="2">
 *      include/pm/set/definitions/general.hpp
 *      
 *      include/pm/set/definitions.hpp
 *  <tr>
 *    <td>ret(f, ret_name, name1, name2, ..., namek)
 *    <td>
 *      RetT (*f)(T1, T2, ..., Tk)
 *  </table>
 *  
 *  \subsection MSGeneralRen Общее обновляющее описание
 *  
 *  \ref MSSpecParameters "Параметры":
 *  - \ref pm::set::Definition "имя данных" name;
 *  - типы RetT, ArgT;
 *  - функция f сигнатуры RetT (ArgT).
 *  
 *  \ref MSSpecConditions "Условия преобразования":
 *  - \ref pm::data::Data "Данные" \ref MSSpecDS "DS"[\ref MSSpecDom "Dom"[name]] непусты и хранят объект \<DS[Dom[name]]\>, тип которого - \ref DQualifiers "основа" типа ArgT.
 *  - Тип RetT \ref DObjectModification "уничтожим".
 *  
 *  \ref MSSpecActions "Преобразование":
 *  - Выполняется вызов f(\<DS[Dom[name]]\>).
 *  - Данные DS[name] \ref pm::data::Data "перенаполняются" значением, возвращаемым вызовом.
 *  
 *  <table>
 *  <tr>
 *    <td>\ref MSSpecInterface "Интерфейс создания"
 *    <td colspan="2">Типы аргументов
 *    <td>Подключающие заголовочные файлы
 *  <tr>
 *    <td>uren<RetT, ArgT>(f, name)
 *    <td>
 *      std::function\<RetT (ArgT)\> f
 *    <td rowspan="2">
 *      std::string name
 *    <td rowspan="2">
 *      include/pm/set/definitions/general.hpp
 *      
 *      include/pm/set/definitions.hpp
 *  <tr>
 *    <td>ren(f, name)
 *    <td>
 *      RetT (*f)(ArgT)
 *  </table>
 *  
 *  \section MSComposition Композиция описаний
 *  
 *  \ref MSSpecParameters "Параметры" - *подописания*: функциональные описания df1, df2, ..., dfk для произвольного k
 *  
 *  \ref pm::set::Definition "Именами данных" являются все имена данных подописаний.
 *  
 *  \ref MSSpecActions "Преобразование": данные последовательно по порядку преобразуются процедурами, соответствующими описаниям df1, df2, ..., dfk.
 *  
 *  <table>
 *  <tr>
 *    <td>\ref MSSpecInterface "Интерфейс создания"
 *    <td>Типы аргументов
 *    <td>Пояснения
 *    <td colspan="2">Подключающие заголовочные файлы
 *  <tr>
 *    <td>comp(dseq)
 *    <td>
 *      std::vector\<pm::set::Definition\> dseq
 *    <td>
 *      Подописания - элементы вектора dseq в том же порядке.
 *    <td>
 *      include/pm/set/definitions/general.hpp
 *    <td rowspan="3">
 *      include/pm/set/definitions.hpp
 *  <tr>
 *    <td>comp(args ...)
 *    <td>
 *      template<typename ... Args> Args ... args
 *    <td>
 *      Эквивалентно описанию comp({args ...}) с \ref DPerfectForwarding "идеальной пересылкой".
 *    <td rowspan="2">
 *      include/pm/set/definitions/derived.hpp
 *  <tr>
 *    <td>d1 * d2
 *    <td>
 *      pm::set::Definition d1
 *      
 *      pm::set::Definition d2
 *    <td>
 *      Подописания: d1, d2.
 *  </table>
 *  
 *  \section MSDocSpecific Конкретные описания
 *  
 *  \subsection MSTrivial Тривиальное описание
 *  
 *  \ref MSSpecActions "Преобразование": данные не изменяются.
 *  
 *  <table>
 *  <tr>
 *    <td>\ref MSSpecInterface "Интерфейс создания"
 *    <td>Подключающие заголовочные файлы
 *  <tr>
 *    <td>fun()
 *    <td>
 *      include/pm/set/definitions/trivial.hpp
 *      
 *      include/pm/set/definitions.hpp
 *  </table>
 *  
 *  \subsection MSEqualize Приравнять данные
 *  
 *  \ref MSSpecParameters "Параметры": \ref pm::set::Definition "имена данных" name_source, name_target.
 *  
 *  \ref MSSpecConditions "Условия преобразования": если \ref pm::data::Data "данные" \ref MSSpecDS "DS"[\ref MSSpecDom "Dom"[name_source]] непусты, то тип хранящегося в них объекта \<DS[Dom[name_source]]\> \ref DObjectModification "копируем".
 *  
 *  \ref MSSpecActions "Преобразование": данные DS[Dom[name_target]] \ref pm::data::Data "перенаполняются" копией опционального объекта \<DS[Dom[name_source]]\>.
 *  
 *  <table>
 *  <tr>
 *    <td>\ref MSSpecInterface "Интерфейс создания"
 *    <td>Типы аргументов
 *    <td>Подключающие заголовочные файлы
 *  <tr>
 *    <td>equalize(name_target, name_source)
 *    <td>
 *      std::string name_target
 *      
 *      std::string name_source
 *    <td>
 *      include/pm/set/definitions/specific.hpp
 *      
 *      include/pm/set/definitions.hpp
 *  </table>
 *  
 *  \subsection MSSwap Обменять данные
 *  
 *  \ref MSSpecParameters "Параметры": \ref pm::set::Definition "имена данных" name1, name2.
 *  
 *  \ref MSSpecActions "Преобразование": данные \ref MSSpecDS "DS"[\ref MSSpecDom "Dom"[name1]] \ref pm::data::Data "обмениваются" с данными DS[Dom[name2]].
 *  
 *  <table>
 *  <tr>
 *    <td>\ref MSSpecInterface "Интерфейс создания"
 *    <td>Типы аргументов
 *    <td>Подключающие заголовочные файлы
 *  <tr>
 *    <td>swap(name1, name2)
 *    <td>
 *      std::string name1
 *      
 *      std::string name2
 *    <td>
 *      include/pm/set/definitions/specific.hpp
 *      
 *      include/pm/set/definitions.hpp
 *  </table>
 *  
 *  \subsection MSUnset Опустошить данные
 *  
 *  \ref MSSpecParameters "Параметры": \ref pm::set::Definition "имя данных" name.
 *  
 *  \ref MSSpecActions "Преобразование": данные \ref MSSpecDS "DS"[\ref MSSpecDom "Dom"[name]] \ref pm::data::Data "опустошаются".
 *  
 *  <table>
 *  <tr>
 *    <td>\ref MSSpecInterface "Интерфейс создания"
 *    <td>Типы аргументов
 *    <td>Подключающие заголовочные файлы
 *  <tr>
 *    <td>unset(name)
 *    <td>
 *      std::string name
 *    <td>
 *      include/pm/set/definitions/specific.hpp
 *      
 *      include/pm/set/definitions.hpp
 *  </table>
 *  
 *  \subsection MSAdd Прибавить одни данные к другим
 *  
 *  \ref MSSpecParameters "Параметры":
 *  - типы Left, Right;
 *  - \ref pm::set::Definition "имена данных" name_left, name_right.
 *  
 *  \ref MSSpecConditions "Условия преобразования":
 *  - \ref pm::data::Data "Данные" \ref MSSpecDS "DS"[\ref MSSpecDom "Dom"[name_left]] непусты и хранят объект \<DS[Dom[name_left]]\> типа Left.
 *  - Данные DS[Dom[name_right]] непусты и хранят объект \<DS[Dom[name_right]]\> типа Right.
 *  - Присваивание \<DS[Dom[name_left]]\> += \<DS[Dom[name_right]]\> корректно.
 *  
 *  \ref MSSpecActions "Преобразование": выполняется присваивание \<DS[Dom[name_left]]\> += \<DS[Dom[name_right]]\>.
 *  
 *  <table>
 *  <tr>
 *    <td>\ref MSSpecInterface "Интерфейс создания"
 *    <td>Типы аргументов
 *    <td>Пояснения
 *    <td>Подключающие заголовочные файлы
 *  <tr>
 *    <td>add\<Left, Right\>(name_left, name_right)
 *    <td rowspan="2">
 *      std::string name_left
 *      
 *      std::string name_right
 *    <td>
 *    <td rowspan="2">
 *      include/pm/set/definitions/specific.hpp
 *      
 *      include/pm/set/definitions.hpp
 *  <tr>
 *    <td>add\<T\>(name_left, name_right)
 *    <td>Left = Right = T
 *  </table>
 *  
 *  \subsection MSDiv Поделить одни данные на другие
 *  
 *  \ref MSSpecParameters "Параметры":
 *  - типы Left, Right;
 *  - \ref pm::set::Definition "имена данных" name_left, name_right.
 *  
 *  \ref MSSpecConditions "Условия преобразования":
 *  - \ref pm::data::Data "Данные" \ref MSSpecDS "DS"[\ref MSSpecDom "Dom"[name_left]] непусты и хранят объект \<DS[Dom[name_left]]\> типа Left.
 *  - Данные DS[Dom[name_right]] непусты и хранят объект \<DS[Dom[name_right]]\> типа Right.
 *  - Присваивание \<DS[Dom[name_left]]\> /= \<DS[Dom[name_right]]\> корректно.
 *  
 *  \ref MSSpecActions "Преобразование": выполняется присваивание \<DS[Dom[name_left]]\> /= \<DS[Dom[name_right]]\>.
 *  
 *  <table>
 *  <tr>
 *    <td>\ref MSSpecInterface "Интерфейс создания"
 *    <td>Типы аргументов
 *    <td>Пояснения
 *    <td>Подключающие заголовочные файлы
 *  <tr>
 *    <td>div\<Left, Right\>(name_left, name_right)
 *    <td rowspan="2">
 *      std::string name_left
 *      
 *      std::string name_right
 *    <td>
 *    <td rowspan="2">
 *      include/pm/set/definitions/specific.hpp
 *      
 *      include/pm/set/definitions.hpp
 *  <tr>
 *    <td>div\<T\>(name_left, name_right)
 *    <td>Left = Right = T
 *  </table>
 *  
 *  \subsection MSMod Взять остаток от деления одних данных на другие
 *  
 *  \ref MSSpecParameters "Параметры":
 *  - типы Left, Right;
 *  - \ref pm::set::Definition "имена данных" name_left, name_right.
 *  
 *  \ref MSSpecConditions "Условия преобразования":
 *  - \ref pm::data::Data "Данные" \ref MSSpecDS "DS"[\ref MSSpecDom "Dom"[name_left]] непусты и хранят объект \<DS[Dom[name_left]]\> типа Left.
 *  - Данные DS[Dom[name_right]] непусты и хранят объект \<DS[Dom[name_right]]\> типа Right.
 *  - Присваивание \<DS[Dom[name_left]]\> %= \<DS[Dom[name_right]]\> корректно.
 *  
 *  \ref MSSpecActions "Преобразование": выполняется присваивание \<DS[Dom[name_left]]\> %= \<DS[Dom[name_right]]\>.
 *  
 *  <table>
 *  <tr>
 *    <td>\ref MSSpecInterface "Интерфейс создания"
 *    <td>Типы аргументов
 *    <td>Пояснения
 *    <td>Подключающие заголовочные файлы
 *  <tr>
 *    <td>mod\<Left, Right\>(name_left, name_right)
 *    <td rowspan="2">
 *      std::string name_left
 *      
 *      std::string name_right
 *    <td>
 *    <td rowspan="2">
 *      include/pm/set/definitions/specific.hpp
 *      
 *      include/pm/set/definitions.hpp
 *  <tr>
 *    <td>mod\<T\>(name_left, name_right)
 *    <td>Left = Right = T
 *  </table>
 *  
 *  \subsection MSMul Умножить одни данные на другие
 *  
 *  \ref MSSpecParameters "Параметры":
 *  - типы Left, Right;
 *  - \ref pm::set::Definition "имена данных" name_left, name_right.
 *  
 *  \ref MSSpecConditions "Условия преобразования":
 *  - \ref pm::data::Data "Данные" \ref MSSpecDS "DS"[\ref MSSpecDom "Dom"[name_left]] непусты и хранят объект \<DS[Dom[name_left]]\> типа Left.
 *  - Данные DS[Dom[name_right]] непусты и хранят объект \<DS[Dom[name_right]]\> типа Right.
 *  - Присваивание \<DS[Dom[name_left]]\> *= \<DS[Dom[name_right]]\> корректно.
 *  
 *  \ref MSSpecActions "Преобразование": выполняется присваивание \<DS[Dom[name_left]]\> *= \<DS[Dom[name_right]]\>.
 *  
 *  <table>
 *  <tr>
 *    <td>\ref MSSpecInterface "Интерфейс создания"
 *    <td>Типы аргументов
 *    <td>Пояснения
 *    <td>Подключающие заголовочные файлы
 *  <tr>
 *    <td>mul\<Left, Right\>(name_left, name_right)
 *    <td rowspan="2">
 *      std::string name_left
 *      
 *      std::string name_right
 *    <td>
 *    <td rowspan="2">
 *      include/pm/set/definitions/specific.hpp
 *      
 *      include/pm/set/definitions.hpp
 *  <tr>
 *    <td>mul\<T\>(name_left, name_right)
 *    <td>Left = Right = T
 *  </table>
 *  
 *  \subsection MSSub Вычесть одни данные из других
 *  
 *  \ref MSSpecParameters "Параметры":
 *  - типы Left, Right;
 *  - \ref pm::set::Definition "имена данных" name_left, name_right.
 *  
 *  \ref MSSpecConditions "Условия преобразования":
 *  - \ref pm::data::Data "Данные" \ref MSSpecDS "DS"[\ref MSSpecDom "Dom"[name_left]] непусты и хранят объект \<DS[Dom[name_left]]\> типа Left.
 *  - Данные DS[Dom[name_right]] непусты и хранят объект \<DS[Dom[name_right]]\> типа Right.
 *  - Присваивание \<DS[Dom[name_left]]\> -= \<DS[Dom[name_right]]\> корректно.
 *  
 *  \ref MSSpecActions "Преобразование": выполняется присваивание \<DS[Dom[name_left]]\> -= \<DS[Dom[name_right]]\>.
 *  
 *  <table>
 *  <tr>
 *    <td>\ref MSSpecInterface "Интерфейс создания"
 *    <td>Типы аргументов
 *    <td>Пояснения
 *    <td>Подключающие заголовочные файлы
 *  <tr>
 *    <td>sub\<Left, Right\>(name_left, name_right)
 *    <td rowspan="2">
 *      std::string name_left
 *      
 *      std::string name_right
 *    <td>
 *    <td rowspan="2">
 *      include/pm/set/definitions/specific.hpp
 *      
 *      include/pm/set/definitions.hpp
 *  <tr>
 *    <td>sub\<T\>(name_left, name_right)
 *    <td>Left = Right = T
 *  </table>
 *  
 *  \subsection MSAddC Прибавить константу к данным
 *  
 *  \ref MSSpecParameters "Параметры":
 *  - типы Left, Right;
 *  - значение val типа Right;
 *  - \ref pm::set::Definition "имя данных" name.
 *  
 *  \ref MSSpecConditions "Условия преобразования":
 *  - \ref pm::data::Data "Данные" \ref MSSpecDS "DS"[\ref MSSpecDom "Dom"[name]] непусты и хранят объект \<DS[Dom[name]]\> типа Left.
 *  - Присваивание \<DS[Dom[name]]\> += val корректно.
 *  
 *  \ref MSSpecActions "Преобразование": выполняется присваивание \<DS[Dom[name]]\> += val.
 *  
 *  <table>
 *  <tr>
 *    <td>\ref MSSpecInterface "Интерфейс создания"
 *    <td>Типы аргументов
 *    <td>Пояснения
 *    <td>Подключающие заголовочные файлы
 *  <tr>
 *    <td>addc\<Left, Right\>(name, val)
 *    <td rowspan="2">
 *      std::string name_left
 *      
 *      std::string name_right
 *    <td>
 *    <td rowspan="2">
 *      include/pm/set/definitions/specific.hpp
 *      
 *      include/pm/set/definitions.hpp
 *  <tr>
 *    <td>addc\<Left\>(name, val)
 *    <td>Right - \ref DQualifiers "основа" типа значения val.
 *  </table>
 *  
 *  \subsection MSDivC Поделить данные на константу
 *  
 *  \ref MSSpecParameters "Параметры":
 *  - типы Left, Right;
 *  - значение val типа Right;
 *  - \ref pm::set::Definition "имя данных" name.
 *  
 *  \ref MSSpecConditions "Условия преобразования":
 *  - \ref pm::data::Data "Данные" \ref MSSpecDS "DS"[\ref MSSpecDom "Dom"[name]] непусты и хранят объект \<DS[Dom[name]]\> типа Left.
 *  - Присваивание \<DS[Dom[name]]\> /= val корректно.
 *  
 *  \ref MSSpecActions "Преобразование": выполняется присваивание \<DS[Dom[name]]\> /= val.
 *  
 *  <table>
 *  <tr>
 *    <td>\ref MSSpecInterface "Интерфейс создания"
 *    <td>Типы аргументов
 *    <td>Пояснения
 *    <td>Подключающие заголовочные файлы
 *  <tr>
 *    <td>divc\<Left, Right\>(name, val)
 *    <td rowspan="2">
 *      std::string name_left
 *      
 *      std::string name_right
 *    <td>
 *    <td rowspan="2">
 *      include/pm/set/definitions/specific.hpp
 *      
 *      include/pm/set/definitions.hpp
 *  <tr>
 *    <td>divc\<Left\>(name, val)
 *    <td>Right - \ref DQualifiers "основа" типа значения val.
 *  </table>
 *  
 *  \subsection MSModC Взять остаток от деления данных на константу
 *  
 *  \ref MSSpecParameters "Параметры":
 *  - типы Left, Right;
 *  - значение val типа Right;
 *  - \ref pm::set::Definition "имя данных" name.
 *  
 *  \ref MSSpecConditions "Условия преобразования":
 *  - \ref pm::data::Data "Данные" \ref MSSpecDS "DS"[\ref MSSpecDom "Dom"[name]] непусты и хранят объект \<DS[Dom[name]]\> типа Left.
 *  - Присваивание \<DS[Dom[name]]\> %= val корректно.
 *  
 *  \ref MSSpecActions "Преобразование": выполняется присваивание \<DS[Dom[name]]\> %= val.
 *  
 *  <table>
 *  <tr>
 *    <td>\ref MSSpecInterface "Интерфейс создания"
 *    <td>Типы аргументов
 *    <td>Пояснения
 *    <td>Подключающие заголовочные файлы
 *  <tr>
 *    <td>modc\<Left, Right\>(name, val)
 *    <td rowspan="2">
 *      std::string name_left
 *      
 *      std::string name_right
 *    <td>
 *    <td rowspan="2">
 *      include/pm/set/definitions/specific.hpp
 *      
 *      include/pm/set/definitions.hpp
 *  <tr>
 *    <td>modc\<Left\>(name, val)
 *    <td>Right - \ref DQualifiers "основа" типа значения val.
 *  </table>
 *  
 *  \subsection MSMulC Умножить данные на константу
 *  
 *  \ref MSSpecParameters "Параметры":
 *  - типы Left, Right;
 *  - значение val типа Right;
 *  - \ref pm::set::Definition "имя данных" name.
 *  
 *  \ref MSSpecConditions "Условия преобразования":
 *  - \ref pm::data::Data "Данные" \ref MSSpecDS "DS"[\ref MSSpecDom "Dom"[name]] непусты и хранят объект \<DS[Dom[name]]\> типа Left.
 *  - Присваивание \<DS[Dom[name]]\> *= val корректно.
 *  
 *  \ref MSSpecActions "Преобразование": выполняется присваивание \<DS[Dom[name]]\> *= val.
 *  
 *  <table>
 *  <tr>
 *    <td>\ref MSSpecInterface "Интерфейс создания"
 *    <td>Типы аргументов
 *    <td>Пояснения
 *    <td>Подключающие заголовочные файлы
 *  <tr>
 *    <td>mulc\<Left, Right\>(name, val)
 *    <td rowspan="2">
 *      std::string name_left
 *      
 *      std::string name_right
 *    <td>
 *    <td rowspan="2">
 *      include/pm/set/definitions/specific.hpp
 *      
 *      include/pm/set/definitions.hpp
 *  <tr>
 *    <td>mulc\<Left\>(name, val)
 *    <td>Right - \ref DQualifiers "основа" типа значения val.
 *  </table>
 *  
 *  \subsection MSSubC Вычесть константу из данных
 *  
 *  \ref MSSpecParameters "Параметры":
 *  - типы Left, Right;
 *  - значение val типа Right;
 *  - \ref pm::set::Definition "имя данных" name.
 *  
 *  \ref MSSpecConditions "Условия преобразования":
 *  - \ref pm::data::Data "Данные" \ref MSSpecDS "DS"[\ref MSSpecDom "Dom"[name]] непусты и хранят объект \<DS[Dom[name]]\> типа Left.
 *  - Присваивание \<DS[Dom[name]]\> -= val корректно.
 *  
 *  \ref MSSpecActions "Преобразование": выполняется присваивание \<DS[Dom[name]]\> -= val.
 *  
 *  <table>
 *  <tr>
 *    <td>\ref MSSpecInterface "Интерфейс создания"
 *    <td>Типы аргументов
 *    <td>Пояснения
 *    <td>Подключающие заголовочные файлы
 *  <tr>
 *    <td>subc\<Left, Right\>(name, val)
 *    <td rowspan="2">
 *      std::string name_left
 *      
 *      std::string name_right
 *    <td>
 *    <td rowspan="2">
 *      include/pm/set/definitions/specific.hpp
 *      
 *      include/pm/set/definitions.hpp
 *  <tr>
 *    <td>subc\<Left\>(name, val)
 *    <td>Right - \ref DQualifiers "основа" типа значения val.
 *  </table>
 *  
 *  \subsection MSCharToDecimal Преобразовать символ цифры в цифру
 *  
 *  \ref MSSpecParameters "Параметры":
 *  - тип Int;
 *  - \ref pm::set::Definition "имя данных" name.
 *  
 *  \ref MSSpecConditions "Условия преобразования":
 *  - \ref pm::data::Data "Данные" \ref MSSpecDS "DS"[\ref MSSpecDom "Dom"[name]] непусты и хранят объект \<DS[Dom[name]]\> типа char.
 *  - Тип Int \ref DObjectModification "инициализируем" от значений типа char и \ref DObjectModification "уничтожим".
 *  
 *  \ref MSSpecActions "Преобразование": данные DS[Dom[name]] \ref pm::data::Data "перенаполняются" объектом Int(\<DS[Dom[name]]\> - '0').
 *  
 *  <table>
 *  <tr>
 *    <td>\ref MSSpecInterface "Интерфейс создания"
 *    <td>Типы аргументов
 *    <td>Подключающие заголовочные файлы
 *  <tr>
 *    <td>char_to_decimal\<Int\>(name)
 *    <td>
 *      std::string name
 *    <td>
 *      include/pm/set/definitions/specific.hpp
 *      
 *      include/pm/set/definitions.hpp
 *  </table>
 *  
 *  \subsection MSCharToString Преобразовать символ в строку
 *  
 *  \ref MSSpecParameters "Параметр": \ref pm::set::Definition "имя данных" name.
 *  
 *  \ref MSSpecConditions "Условия преобразования": \ref pm::data::Data "данные" \ref MSSpecDS "DS"[\ref MSSpecDom "Dom"[name]] непусты и хранят объект \<DS[Dom[name]]\> типа char.
 *  
 *  \ref MSSpecActions "Преобразование": данные DS[Dom[name]] \ref pm::data::Data "перенаполняются" объектом типа std::string, равным строке из одного \ref DTypes "символа" \<DS[Dom[name]]\>.
 *  
 *  <table>
 *  <tr>
 *    <td>\ref MSSpecInterface "Интерфейс создания"
 *    <td>Типы аргументов
 *    <td>Подключающие заголовочные файлы
 *  <tr>
 *    <td>char_to_string(name)
 *    <td>
 *      std::string name
 *    <td>
 *      include/pm/set/definitions/specific.hpp
 *      
 *      include/pm/set/definitions.hpp
 *  </table>
 *  
 *  \subsection MSConvert Преобразовать тип данных
 *  
 *  \ref MSSpecParameters "Параметры":
 *  - типы From, To;
 *  - \ref pm::set::Definition "имя данных" name.
 *  
 *  \ref MSSpecConditions "Условия преобразования":
 *  - \ref pm::data::Data "данные" \ref MSSpecDS "DS"[\ref MSSpecDom "Dom"[name]] непусты и хранят объект \<DS[Dom[name]]\> типа From.
 *  - Тип To \ref DObjectModification "инициализируем" от значений типа From и \ref DObjectModification "уничтожим".
 *  
 *  \ref MSSpecActions "Преобразование": данные DS[Dom[name]] \ref pm::data::Data "перенаполняются" объектом To(\<DS[Dom[name]]\>).
 *  
 *  <table>
 *  <tr>
 *    <td>\ref MSSpecInterface "Интерфейс создания"
 *    <td>Типы аргументов
 *    <td>Подключающие заголовочные файлы
 *  <tr>
 *    <td>convert\<To, From\>(name)
 *    <td>
 *      std::string name
 *    <td>
 *      include/pm/set/definitions/specific.hpp
 *      
 *      include/pm/set/definitions.hpp
 *  </table>
 *  
 *  \subsection MSCreate Записать константу в данные
 *  
 *  \ref MSSpecParameters "Параметры":
 *  - тип T;
 *  - значение val типа T;
 *  - \ref pm::set::Definition "имя данных" name.
 *  
 *  \ref MSSpecConditions "Условия преобразования": тип T \ref DObjectModification "уничтожим" и \ref DObjectModification "копируем".
 *  
 *  \ref MSSpecActions "Преобразование": данные \ref MSSpecDS "DS"[\ref MSSpecDom "Dom"[name]] \ref pm::data::Data "перенаполняются" новой копией объекта val.
 *  
 *  <table>
 *  <tr>
 *    <td>\ref MSSpecInterface "Интерфейс создания"
 *    <td>Типы аргументов
 *    <td>Пояснения
 *    <td>Подключающие заголовочные файлы
 *  <tr>
 *    <td>create\<T\>(name, val)
 *    <td rowspan="2">
 *      std::string name
 *    <td rowspan="2">
 *      include/pm/set/definitions/specific.hpp
 *      
 *      include/pm/set/definitions.hpp
 *  <tr>
 *    <td>create(name, val)
 *    <td>T - \ref DQualifiers "основа" типа значения val.
 *  </table>
 *  
 *  \subsection MSStringToDecimal Преобразовать строку в число
 *  
 *  \ref MSSpecParameters "Параметры":
 *  - тип Int;
 *  - \ref pm::set::Definition "имя данных" name.
 *  
 *  \ref MSSpecConditions "Условия преобразования":
 *  - \ref pm::data::Data "Данные" \ref MSSpecDS "DS"[\ref MSSpecDom "Dom"[name]] непусты и хранят объект \<DS[Dom[name]]\> типа std::string, значение которого - непустая строка, содержащая только \ref DTypes "символы десятичных цифр".
 *  - Для типа Int корректна \ref StringToDecimalConversion "обычная схема итеративного преобразования строки в число".
 *  - Тип Int \ref DObjectModification "уничтожим".
 *  
 *  \ref MSSpecActions "Преобразование": данные DS[Dom[name]] \ref pm::data::Data "перенаполняются" объектом типа Int со значением, десятичная запись которого хранится в \ref DTypes "строке" \<DS[Dom[name]]\>.
 *  
 *  <table>
 *  <tr>
 *    <td>\ref MSSpecInterface "Интерфейс создания"
 *    <td>Типы аргументов
 *    <td>Подключающие заголовочные файлы
 *  <tr>
 *    <td>string_to_decimal\<Int\>(name)
 *    <td>
 *      std::string name
 *    <td>
 *      include/pm/set/definitions/specific.hpp
 *      
 *      include/pm/set/definitions.hpp
 *  </table>
 */
