/*! \page GNNDataFunction Функция над данными
 *  
 *  *Функция над данными* местности \f$ n \f$ - это функциональный объект \f$ f \f$, вызовом которого изменяется набор \ref GNNData "данных" \f$ d_1, \dots, d_n \f$, доступных по \ref pm::type_abuse::DPtr "указателям на данные".
 *  Выполнение такого вызова в документации называется *применением функции* к данным \f$ d_1, \dots, d_n \f$.
 *  
 *  Каждая функция над данными, реализованная в библиотеке, имеет следующее устройство:
 *  - Она содержит *задающую функцию* - произвольный функциональный объект.
 *  - Ей определяется то, как \ref GNSFunctionCall "вызов" задающей функции соотносится с применением функции над данными к набору данных.
 *  
 *  Применение функции над данными к набору данных *корректно*, если:
 *  - при применении совершаются корректные действия над данными (согласно документации используемых типов);
 *  - в вызов задающей функции передаются *корректные аргументы*.
 *  
 *  То, какие аргументы являются корректными, определяется видом функции над данными и устройством задающей функции.
 *  
 *  \section GNDFPure Чистая функция над данными
 *  
 *  Сигнатура вызова задающей функции имеет следующий вид: `void f(const pm::type_abuse::DPtr &, ..., const pm::type_abuse::DPtr &)` - число аргументов совпадает с местностью функции над данными.
 *  
 *  Применение функции к данным `d_1, ..., d_n` по соответствующим \ref pm::type_abuse::DPtr "указателям" `p_1, ..., p_n` - это выполнение вызова `f(p_1, ..., p_n)`.
 *  
 *  Аргументы всегда корректны.
 *  
 *  \section GNDFRef Ссылочная функция над данными
 *  
 *  Сигнатура вызова задающей функции имеет следующий вид: `void f(T_1, ..., T_n)`, где `T_1, ..., T_n` - произвольные типы, и `n` - местность функции над данными.
 *  
 *  Применение функции к данным `d_1, ..., d_n` - это выполнение вызова `f(d_1, ..., d_n)`.
 *  
 *  Аргументы корректны, если в момент вызова `f` каждые данные `d_i`, \f$ 1 \le i \le n \f$, непусты и имеют тип, равный \ref GNSQualifiers "основе" соответствующего типа `T_i`.
 *  
 *  \section GNDFRen Устанавливающая функция над данными
 *  
 *  Сигнатура вызова задающей функции имеет следующий вид: `R f(T_2, ..., T_n)`, где `R, T_2, ..., T_n` - произвольные типы, и `n` - местность функции над данными.
 *  
 *  Применение функции к данным `d_1, ..., d_n` - это:
 *  - выполнение вызова `f(d_2, ..., d_n)`;
 *  - переустановка данных `d_1` в тип, равный \ref GNSQualifiers "основе" типа `R`, от значения, возвращаемого выполненным вызовом.
 *  
 *  Аргументы корректны, если в момент вызова `f` каждые данные `d_i`, \f$ 2 \le i \le n \f$, непусты и имеют тип, равный \ref GNSQualifiers "основе" соответствующего типа `T_i`.
 *  
 *  \section GNDFRet Переустанавливающая функция над данными
 *  
 *  Сигнатура вызова задающей функции имеет следующий вид: `R f(T_1, ..., T_n)`, где `R, T_1, ..., T_n` - произвольные типы, и `n` - местность функции над данными.
 *  
 *  Применение функции к данным `d_1, ..., d_n` - это:
 *  - выполнение вызова `f(d_1, ..., d_n)`;
 *  - переустановка данных `d_1` в тип, равный \ref GNSQualifiers "основе" типа `R`, от значения, возвращаемого выполненным вызовом.
 *  
 *  Аргументы корректны, если в момент вызова `f` каждые данные `d_i`, \f$ 1 \le i \le n \f$, непусты и имеют тип, равный \ref GNSQualifiers "основе" соответствующего типа `T_i`.
 */
