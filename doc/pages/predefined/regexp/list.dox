/*! \page PRList Список готовых регулярных выражений
 *  
 *  \tableofcontents
 *  
 *  \ref pm::regexp::Regexp "Что такое регулярное выражение."
 *  
 *  \ref PRegexp "Что такое готовое регулярное выражение."
 *  
 *  Готовые регулярные выражения подключаются \ref include/pm/regexp/expressions.hpp "этим файлом".
 *  
 *  Все выражения, создаваемые документированным способом, \ref PRSafety "безопасны".
 *  
 *  \section PRLTerminal Терминальные выражения
 *  
 *  Подключаются \ref include/pm/regexp/expressions/terminal.hpp "этим файлом".
 *  
 *  \ref GNNParsing "Принимают" \ref GNSTypes "строку" заданного вида.
 *  Записывают в текущие данные \ref pm::regexp::Context "контекста" информацию, извлечённую из этой строки.
 *  
 *  \subsection PRLTTrivial Тривиальные выражения
 *  
 *  Подключаются \ref include/pm/regexp/expressions/terminal/trivial.hpp "этим файлом".
 *  
 *  \ref GNNParsing "Принимают" только пустую \ref GNSTypes "строку".
 *  Не изменяют текущие и сохранённые данные \ref pm::regexp::Context "контекста".
 *  
 *  - \ref PREnd "Конец потока"
 *  - \ref PRTrue "Успех"
 *  - \ref PRFalse "Неуспех"
 *  
 *  \subsection PRLTSymbol Символьные выражения
 *  
 *  Подключаются \ref include/pm/regexp/expressions/terminal/symbol.hpp "этим файлом".
 *  
 *  \ref GNNParsing "Принимают" \ref GNSTypes "строку" длины 1, содержащую \ref GNSTypes "символ" заданного вида.
 *  Устанавливают этот символ в текущие данные \ref pm::regexp::Context "контекста".
 *  
 *  - \ref PRAnyCharacter "Любой символ"
 *  - \ref PRGivenCharacter "Заданный символ"
 *  - \ref PRCharacterOfGivenSet "Символ заданного множества"
 *  - \ref PRCharacterOfGivenRange "Символ заданного диапазона"
 *  - \ref PRCIdHeadCharacter "Головной символ идентификатора языка C"
 *  - \ref PRCIdTailCharacter "Хвостовой символ идентификатора языка C"
 *  - \ref PRDecimalDigitCharacter "Символ десятичной цифры"
 *  - \ref PRLatinLetter "Латинская буква"
 *  - \ref PRLatinLetterLowercase "Маленькая латинская буква"
 *  - \ref PRLatinLetterUppercase "Большая латинская буква"
 *  - \ref PRUnderscoreCharacter "Символ нижнего подчёркивания"
 *  
 *  \subsection PRLTString Строковые выражения
 *  
 *  Подключаются \ref include/pm/regexp/expressions/terminal/string.hpp "этим файлом".
 *  
 *  \ref GNNParsing "Принимают" \ref GNSTypes "строку" заданного вида.
 *  Устанавливают эту строку в текущие данные \ref pm::regexp::Context "контекста".
 *  
 *  - \ref PRGivenString "Заданная строка"
 *  - \ref PRStringOfGivenLength "Строка заданной длины"
 *  - \ref PREnclosedString "Строка, обрамлённая заданными подстроками"
 *  - \ref PRCId "Идентификатор языка C"
 *  - \ref PRDecimalNumberString "Строковая запись десятичного числа"
 *  - \ref PRIdWithoutHeadLetter "Идентификатор без отдельного первого символа"
 *  - \ref PRIdWithHeadLetter "Идентификатор с отдельным первым символом"
 *  
 *  \subsection PRLTInteger Целочисленные выражения
 *  
 *  Подключаются \ref include/pm/regexp/expressions/terminal/integer.hpp "этим файлом".
 *  
 *  \ref GNNParsing "Принимают" \ref GNSTypes "строку" заданного вида.
 *  Устанавливают в текущие данные \ref pm::regexp::Context "контекста" число, извлечённое из этой строки.
 *  
 *  - \ref PRDecimalDigit "Десятичная цифра"
 *  - \ref PRDecimalNumber "Десятичное число"
 *  
 *  \section PRLFlow Выражения для управления потоком разбора
 *  
 *  Подключаются \ref include/pm/regexp/expressions/functional.hpp "этим файлом".
 *  
 *  \subsection PRLFlControl Выражения для комбинирования подразборов
 *  
 *  Подключаются \ref include/pm/regexp/expressions/flow/control.hpp "этим файлом".
 *  
 *  Комбинируют \ref pm::regexp::RegexpInterface "разборы" содержащимися подвыражениями в разбор выражением.
 *  
 *  - \ref PRAlternative "Альтернатива"
 *  - \ref PRConcatenation "Конкатенация"
 *  - \ref PRDifference "Разность"
 *  - \ref PRKleeneStar "Звезда Клини"
 *  - \ref PROptional "Опционал"
 *  
 *  \subsection PRLFlData Выражения для управления извлечением данных
 *  
 *  Подключаются \ref include/pm/regexp/expressions/flow/data.hpp "этим файлом".
 *  
 *  Управляют способом извлечения текущих и сохранённых данных \ref pm::regexp::Context "контекста".
 *  
 *  - \ref PRNoData "Заглушка данных"
 *  - \ref PRHide "Сокрытие данных"
 *  - \ref PRSave "Сохранение данных"
 *  
 *  \section PRLFunctional Функциональные выражения
 *  
 *  Подключаются \ref include/pm/regexp/expressions/functional.hpp "этим файлом".
 *  
 *  Не читают из \ref GNNParsing "потока", не возвращают в поток.
 *  Разбор всегда успешен, \ref GNNParsing "принимается" пустая \ref GNSTypes "строка".
 *  Различаются и полностью определяются способом изменения данных \ref pm::regexp::Context "контекста".
 *  
 *  \subsection PRLFnGeneral Общие функциональные выражения
 *  
 *  Подключаются \ref include/pm/regexp/expressions/functional/general.hpp "этим файлом".
 *  
 *  Создаются с использованием произвольных \ref GNNDataFunction "функций над данными".
 *  Преобразуют текущие и сохранённые данные \ref pm::regexp::Context "контекста" согласно этим функциям.
 *  
 *  - \ref PRFunctionUnaryCurrent "Изменение текущих данных одноместной функцией над данными"
 *  - \ref PRFunctionUnarySaved "Изменение сохранённых данных одноместной функцией над данными"
 *  - \ref PRFunctionBinaryCurrent "Изменение пары: текущие данные, сохранённые данные - двуместной функцией над данными"
 *  - \ref PRFunctionBinarySaved "Изменение пары: сохранённые данные, текущие данные - двуместной функцией над данными"
 *  
 *  \subsection PRLFnSpecific Специальные функциональные выражения
 *  
 *  Подключаются \ref include/pm/regexp/expressions/functional/specific.hpp "этим файлом".
 *  
 *  Преобразуют текущие и сохранённые данные \ref pm::regexp::Context "контекста" заданным простым для понимания способом.
 *  
 *  - \ref PRCGet "Копирование сохранённых данных в текущие"
 *  - \ref PRSGet "Копирование текущих данных в сохранённые"
 *  - \ref PRCSet "Переустановка текущих данных"
 *  - \ref PRSSet "Переустановка сохранённых данных"
 *  - \ref PRSwap "Обмен текущих и сохранённых данных"
 *  - \ref PRCUnset "Сброс текущих данных"
 *  - \ref PRSUnset "Сброс сохранённых данных"
 *  - \ref PRCAdd "Прибавление сохранённых данных к текущим данным"
 *  - \ref PRCAddConstant "Прибавление константы к текущим данным"
 *  - \ref PRCDiv "Деление текущих данных на сохранённые"
 *  - \ref PRCDivConstant "Деление текущих данных на константу"
 *  - \ref PRCMod "Взятие остатка от деления текущих данных на сохранённые"
 *  - \ref PRCModConstant "Взятие остатка от деления текущих данных на константу"
 *  - \ref PRCMul "Умножение текущих данных на сохранённые данные"
 *  - \ref PRCMulConstant "Умножение текущих данных на константу"
 *  - \ref PRCSub "Вычитание сохранённых данных из текущих данных"
 *  - \ref PRCSubConstant "Вычитание константы из текущих данных"
 *  - \ref PRSAdd "Прибавление текущих данных к сохранённым данным"
 *  - \ref PRSAddConstant "Прибавление константы к сохранённым данным"
 *  - \ref PRSDiv "Деление сохранённых данных на текущие данные"
 *  - \ref PRSDivConstant "Деление сохранённых данных на константу"
 *  - \ref PRSMod "Взятие остатка от деления сохранённых данных на текущие данные"
 *  - \ref PRSModConstant "Взятие остатка от деления сохранённых данных на константу"
 *  - \ref PRSMul "Умножение сохранённых данных на текущие данные"
 *  - \ref PRSMulConstant "Умножение сохранённых данных на константу"
 *  - \ref PRSSub "Вычитание текущих данных из сохранённых данных"
 *  - \ref PRSSubConstant "Вычитание константы из сохранённых данных"
 *  - \ref PRCCharToDigit "Преобразование символа цифры в число в текущих данных"
 *  - \ref PRCCharToString "Преобразование символа в строку в текущих данных"
 *  - \ref PRCConvert "Прямое преобразование типа текущих данных"
 *  - \ref PRSCharToDigit "Преобразование символа цифры в число в сохранённых данных"
 *  - \ref PRCCharToString "Преобразование символа в строку в сохранённых данных"
 *  - \ref PRCConvert "Прямое преобразование типа сохранённых данных"
 */
