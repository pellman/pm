/*! \page DValidState Корректное состояние объекта
 *  
 *  
 *  В стандарте C++ используется понятие *корректного состояния* (valid state) объекта.
 *  Использование объектов стандартных типов согласно документации допустимо только для объектов, находящихся в таком состоянии.
 *  Классы, к которым применимо стандартное понятие корректного состояния, здесь называются *стандартно-корректными*.
 *  
 *  Объект стандартно-корректного класса находится в *корректном состоянии* в заданный момент выполнения программы, если верно следующее:
 *  - это момент между завершением \ref DObjectModification "инициализации" и началом \ref DObjectModification "уничтожения" объекта;
 *  - в этот момент объект не изменяется (\ref DObjectModification "перемещением", вызовом изменяющих методов, ...).
 *  
 *  По завершении перемещения объекта стандартно-корректного класса этот объект оказывается в неспецифицированном корректном состоянии.
 *  
 *  Некоторые классы библиотеки используют более строгое понятие корректности и называются *нестандартно-корректными*.
 *  Объект нестандартно-корректного класса находится в *корректном состоянии* в заданный момент выполнения программы, если верно следующее:
 *  - это момент между завершением инициализации и началом уничтожения объекта;
 *  - в этот момент объект не изменяется (перемещением, вызовом изменяющих методов, ...);
 *  - если объект перемещался, то после последнего перемещения ему было присвоено значение объекта в корректном состоянии через \ref DObjectModification "копирующее" или \ref DObjectModification "перемещающее" присваивание.
 *  
 *  Перемещённый объект нестандартно-корректного класса корректно уничтожается, но использование этого объекта где бы то ни было (вызов методов, подача в качестве аргумента функции, ...) **запрещено**, кроме
 *  - уничтожения и
 *  - использования в левой части копирующего или перемещающего присваивания с правой частью - объектом в корректном состоянии.
 */
