/*! \file include/pm/dataset/functions/general.hpp
 *  \brief Содержит интерфейс создания \ref PDGeneral "общих функций над совокупностью данных".
 *  \ingroup ModuleDataset
 *  
 *  Вызовом функции интерфейса возвращается \ref pm::dataset::Function "функция над совокупностью данных" следующего вида:
 *  - Она содержит:
 *   - *подфункцию*: \ref GNNDataFunction "функцию над данными";
 *   - *целевые индексы*: упорядоченный набор \ref GNSTypes "индексов".
 *  - \ref pm::dataset::FunctionInterface "Действие": подфункция применяется к набору \ref GNNData "данных" \ref pm::dataset::Set "ds[[i1]], ..., ds[[in]]" соответственно, где:
 *   - ds - \ref pm::dataset::Set "совокупность данных", к которой применяется действие;
 *   - i1, ..., in - целевые индексы.
 *  
 *  \pre Количество целевых индексов равно местности подфункции.
 *  
 *  \sa \ref PDatasetFunction "Список готовых функций над совокупностью данных и их определений"
 */

/*! \name Тривиальная функция
 *  \anchor PDTrivial
 *  Подфункция: тривиальная 0-местная функция над данными (при применении ничего не происходит).
 *  
 *  Целевые индексы: отсутствуют.
 */
//!\{

  /*! \fn Function pm::dataset::dfun()
   */

//!\}

/*! \name Чистая функция
 *  \anchor PDPure
 *  Подфункция: \ref GNDFPure "чистая" функция над данными, задаваемая функцией \p f.
 *  
 *  Целевые индексы: \p targets.
 *  
 *  \pre \p targets - последовательность индексов, разделённых запятой - столько, какова местность подфункции.
 */
//!\{

  /*! \fn Function pm::dataset::dfun(Fun && f, Targets ... targets)
   */

//!\}

/*! \name Ссылочная функция
 *  \anchor PDRef
 *  Подфункция: \ref GNDFRef "ссылочная" функция над данными, задаваемая функцией \p f.
 *  
 *  Целевые индексы: \p targets.
 *  
 *  \pre \p targets - последовательность индексов, разделённых запятой - столько, какова местность подфункции.
 */
//!\{

  /*! \fn Function pm::dataset::dref(const std::function<void(Args ...)> & f, Targets ... targets)
   */
  /*! \fn Function pm::dataset::dref(std::function<void(Args ...)> && f, Targets ... targets)
   */
  /*! \fn Function pm::dataset::dgref(Any (*f)(Args ...), Targets ... targets)
   */

//!\}

/*! \name Переустанавливающая функция
 *  \anchor PDRen
 *  Подфункция: \ref GNDFRen "переустанавливающая" функция над данными, задаваемая функцией \p f.
 *  
 *  Целевые индексы: \p targets.
 *  
 *  \pre \p targets - последовательность индексов, разделённых запятой - столько, какова местность подфункции.
 */
//!\{

  /*! \fn Function pm::dataset::dren(const std::function<Ret(Args ...)> & f, Targets ... targets)
   */
  /*! \fn Function pm::dataset::dren(std::function<Ret(Args ...)> && f, Targets ... targets)
   */
  /*! \fn Function pm::dataset::dgren(Ret (*f)(Args ...), Targets ... targets)
   */

//!\}

/*! \name Устанавливающая функция
 *  \anchor PDRet
 *  Подфункция: \ref GNDFRet "устанавливающая" функция над данными, задаваемая функцией \p f.
 *  
 *  Целевые индексы: \p targets.
 *  
 *  \pre \p targets - последовательность индексов, разделённых запятой - столько, какова местность подфункции.
 */
//!\{

  /*! \fn Function pm::dataset::dret(const std::function<Ret(Args ...)> & f, Targets ... targets)
   */
  /*! \fn Function pm::dataset::dret(std::function<Ret(Args ...)> && f, Targets ... targets)
   */
  /*! \fn Function pm::dataset::dgret(Ret (*f)(Args ...), Targets ... targets)
   */

//!\}
