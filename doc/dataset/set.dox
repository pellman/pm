/*! \file include/pm/dataset/set.hpp
 *  \brief Содержит класс совокупности данных pm::dataset::Set.
 *  \ingroup ModuleDataset
 */

/*! \class pm::dataset::Set
 *  \brief Класс совокупности данных.
 *  \ingroup ModuleDataset
 *  
 *  *Совокупность данных* ds - это бесконечный набор \ref GNSTypes "индексированных" \ref pm::type_abuse::DPtr "указателей на данные": ds[0], ds[1], ds[2], ... , где ds[i] - это *i-й указатель совокупности*.
 *  
 *  ds[[i]] - обозначение данных по указателю ds[i] - *i-е данные совокупности*.
 *  
 *  Совокупность данных бесконечна только на высоком концептуальном уровне:
 *  в реализации, само собой, используются конечные структуры данных, но устроены они так, чтобы на уровне интерфейса взаимодействия можно было считать совокупность бесконечной.
 *  
 *  Особенности документации
 *  ==
 *  
 *  В документации методов используется терминология, введённая для \ref GNNData "данных", \ref GNNTrickyPointer "хитрых указателей" в целом и \ref pm::type_abuse::DPtr "указателей на данные" в частности.
 *  
 *  `*this` - это совокупность данных, вызов метода которой документируется.
 *  
 *  Особые свойства класса
 *  ==
 *  
 *  \ref GNNValidState "Нестандартно-корректен".
 *  
 *  Неявные методы
 *  ==
 *  
 *  Конструктор по умолчанию: `Set()`
 *  --
 *  
 *  Инициализировать совокупность по умолчанию: каждый указатель совокупности направляется на новые пустые данные.
 *  
 *  Конструктор копирования: `Set(const Set & c)`
 *  --
 *  
 *  Инициализировать совокупность, каждый указатель которой направлен на данные совокупности \p c с тем же индексом.
 *  
 *  Конструктор перемещения: `Set(Set && c)`
 *  --
 *  
 *  Инициализировать совокупность, каждый указатель которой направлен на данные совокупности \p c с тем же индексом.
 *  
 *  Копирующее присваивание: `Set & operator =(const Set & c)`
 *  --
 *  
 *  Перенаправить каждый указатель `*this` на данные совокупности \p c с тем же индексом.
 *  
 *  Перемещающее присваивание: `Set & operator =(Set && c)`
 *  --
 *  
 *  Перенаправить каждый указатель `*this` на данные совокупности \p c с тем же индексом.
 *  
 *  Деструктор: `~Set()`
 *  --
 *  
 *  Стандартное значение.
 */

/*! \fn void pm::dataset::Set::detach()
 *  \brief Перенаправить каждый указатель `*this` на новую копию данных по этому указателю.
 *  
 *  \pre Для каждого индекса `i` верно: если `i`-е данные совокупности `ds` непусты, то тип этих данных \ref GNSLifetime "копируем".
 */

/*! \fn void pm::dataset::Set::detach_receive(const Set & set)
 *  \brief Перенаправить каждый указатель `*this` на новую копию данных по указателю \p set с тем же индексом.
 *  
 *  \pre Для каждого индекса `i` верно: если `i`-е данные совокупности \p set непусты, то тип этих данных \ref GNSLifetime "копируем".
 */

/*! \fn void pm::dataset::Set::detach_unset()
 *  \brief Перенаправить каждый указатель `*this` на новые пустые данные.
 */

/*! \fn void pm::dataset::Set::receive(const Set & set) const
 *  \brief Перезаписать данные по каждому указателю `*this` данными совокупности \p set с тем же индексом.
 *  
 *  \pre Для каждого индекса `i` верно: если `i`-е данные совокупности \p set непусты, то тип этих данных \ref GNSLifetime "копируем".
 */

/*! \fn void pm::dataset::Set::swap(const Set & set) const
 *  \brief Обменять каждые данные `*this` и данные совокупности \p set с тем же индексом.
 */

/*! \fn void pm::dataset::Set::unset() const
 *  \brief Сбросить каждые данные `*this`.
 */

/*! \fn Set pm::dataset::Set::clone() const
 *  \brief Вернуть совокупность, каждый указатель которой направлен на новую копию данных `*this` с тем же индексом.
 *  
 *  \pre Для каждого индекса `i` верно: если `i`-е данные совокупности `*this` непусты, то тип этих данных \ref GNSLifetime "копируем".
 */

/*! \fn void pm::dataset::Set::send(const Set & set) const
 *  \brief Перезаписать данные по каждому указателю совокупности \p set данными совокупности `*this` с тем же индексом.
 *  
 *  \pre Для каждого индекса `i` верно: если `i`-е данные совокупности `*this` непусты, то тип этих данных \ref GNSLifetime "копируем".
 */

/*! \fn const type_abuse::DPtr & pm::dataset::Set::ptr(size_t i) const
 *  \brief Вернуть i-й указатель `*this`.
 */

/*! \fn StoredType & pm::dataset::Set::data(size_t i) const
 *  \brief Вернуть i-е данные `*this`.
 *  
 *  \pre i-е данные совокупности `*this` в момент вызова непусты и имеют тип \p T.
 */
