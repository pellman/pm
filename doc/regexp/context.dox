/*! \file include/pm/regexp/context.hpp
 *  \brief Содержит класс регулярного контекста разбора pm::regexp::Context и переменную регулярного контекста по умолчанию pm::regexp::default_context.
 *  \ingroup ModuleRegexp
 */

/*! \class pm::regexp::Context
 *  \brief Класс регулярного контекста разбора.
 *  \ingroup ModuleRegexp
 *  
 *  Используется в \ref pm::regexp::RegexpInterface "методах разбора регулярным выражением".
 *  
 *  Содержит следующие \ref GNNData "данные" (*данные контекста*):
 *  - *принятую строку*, доступную через \ref pm::type_abuse::SPtr "стабильный указатель" на \ref GNSTypes "строку";
 *  - *текущие данные* и *сохранённые данные*, доступные через \ref pm::type_abuse::DPtr "указатели на данные";
 *  - *флаг активности строки* и *флаг активности данных*, доступные через \ref pm::regexp::subcontext::Activator "стабильные указатели на флаг активности".
 *  
 *  При работе с контекстом следует иметь в виду, что контекст - это набор указателей, и при действиями над контекстом производятся действия над указателями.
 *  В частности, при копировании контекста копируются указатели: копия контекста содержит те же данные (вплоть до размещения в памяти), что и исходный контекст.
 *  Создание копии данных производится явно специальными методами контекста и указателей.
 *  
 *  Особенности документации
 *  ==
 *  
 *  `*this` - это контекст, вызов метода которого документируется.
 *  
 *  В документации используется терминология, введённая для \ref GNNData "данных", \ref GNNTrickyPointer "хитрых указателей" в целом и \ref pm::type_abuse::SPtr "стабильных указателей" и \ref pm::type_abuse::DPtr "указателей на данные" в частности.
 *  
 *  Особые свойства класса
 *  ==
 *  
 *  \ref GNNValidState "Нестандартно-корректен".
 *  
 *  Неявные методы
 *  ==
 *  
 *  Конструктор по умолчанию: `Context()`
 *  
 *  Инициализировать все указатели контекста по умолчанию: новая пустая принятая строка, пара новых пустых данных, пара новых опущенных флагов.
 *  
 *  Конструктор копирования: `Context(const Context & c)`
 *  --
 *  
 *  Инициализировать контекст, указатели которого направлены на соответствующие данные контекста \p c.
 *  
 *  Конструктор перемещения: `Context(Context && c)`
 *  --
 *  
 *  Инициализировать контекст, указатели которого направлены на соответствующие данные контекста \p c.
 *  
 *  Копирующее присваивание: `Context & operator =(const Context & c)`
 *  --
 *  
 *  Перенаправить все указатели `*this` на соответствующие данные контекста \p c.
 *  
 *  Перемещающее присваивание: `Context & operator =(Context && c)`
 *  --
 *  
 *  Перенаправить все указатели `*this` на соответствующие данные контекста \p c.
 *  
 *  Деструктор: `~Context()`
 *  --
 *  
 *  Стандартное значение.
 */

/*! \fn void pm::regexp::Context::detach()
 *  \brief Перенаправить каждый указатель `*this` на новую копию данных по этому указателю.
 *  
 *  \pre Если текущие данные этого контекста в момент вызова непусты, то тип этих данных \ref GNSLifetime "копируем".
 *  \pre Если сохранённые данные этого контекста в момент вызова непусты, то тип этих данных \ref GNSLifetime "копируем".
 */

/*! \fn void pm::regexp::Context::detach_receive(const Context & context)
 *  \brief Перенаправить каждый указатель `*this` но новую копию соответствующих данных контекста \p context.
 *  
 *  \pre Если текущие данные контекста \p context в момент вызова непусты, то тип этих данных \ref GNSLifetime "копируем".
 *  \pre Если сохранённые данные контекста \p context в момент вызова непусты, то тип этих данных \ref GNSLifetime "копируем".
 */

/*! \fn void pm::regexp::Context::detach_unset()
 *  \brief Перенаправить каждый указатель `*this` на соответствующие новые данные по умолчанию: пустая принятая строка, пустые текущие и сохранённые данные, опущенные флаги активности.
 */

/*! \fn void pm::regexp::Context::receive(const Context & context) const
 *  \brief Перезаписать каждые данные `*this` соответствующими данными контекста \p context.
 *  
 *  \pre Если текущие данные контекста \p context в момент вызова непусты, то тип этих данных \ref GNSLifetime "копируем".
 *  \pre Если сохранённые данные контекста \p context в момент вызова непусты, то тип этих данных \ref GNSLifetime "копируем".
 */

/*! \fn void pm::regexp::Context::swap(const Context & context) const
 *  \brief Обменять каждые данные `*this` и соответствующие данные контекста \p context.
 */

/*! \fn void pm::regexp::Context::unset() const
 *  \brief Сбросить все данные контекста.
 */

/*! \fn Context pm::regexp::Context::clone() const
 *  \brief Вернуть контекст, указатели которого направлены на новые копии соответствующих данных контекста `*this`.
 *  
 *  \pre Если текущие данные контекста `*this` в момент вызова непусты, то тип этих данных \ref GNSLifetime "копируем".
 *  \pre Если сохранённые данные контекста `*this` в момент вызова непусты, то тип этих данных \ref GNSLifetime "копируем".
 */

/*! \fn void pm::regexp::Context::send(const Context & context) const
 *  \brief Перезаписать каждые данные контекста \p context соответствующими данными контекста `*this`.
 *  
 *  \pre Если текущие данные контекста `*this` в момент вызова непусты, то тип этих данных \ref GNSLifetime "копируем".
 *  \pre Если сохранённые данные контекста `*this` в момент вызова непусты, то тип этих данных \ref GNSLifetime "копируем".
 */

/*! \fn bool & pm::regexp::Context::data_flag() const
 *  \brief Вернуть флаг активности данных `*this`.
 */

/*! \fn bool & pm::regexp::Context::string_flag() const
 *  \brief Вернуть флаг активности строки `*this`.
 */

/*! \fn T & pm::regexp::Context::current_data() const
 *  \brief Вернуть текущие данные `*this`.
 *  
 *  \pre Текущие данные контекста `*this` в момент вызова непусты и имеют тип \p T.
 */

/*! \fn T & pm::regexp::Context::saved_data() const
 *  \brief Вернуть сохранённые данные `*this`.
 *  
 *  \pre Сохранённые данные контекста `*this` в момент вызова непусты и имеют тип \p T.
 */

/*! \fn std::string & pm::regexp::Context::str() const
 *  \brief Вернуть строку `*this`.
 */

/*! \var subcontext::Activator pm::regexp::Context::p_data_flag
 *  \brief Указатель на флаг активности данных `*this`.
 */

/*! \var subcontext::Activator pm::regexp::Context::p_string_flag
 *  \brief Указатель на флаг активности строки `*this`.
 */

/*! \var type_abuse::DPtr pm::regexp::Context::p_current_data
 *  \brief Указатель на текущие данные `*this`.
 */

/*! \var type_abuse::DPtr pm::regexp::Context::p_saved_data
 *  \brief Указатель на сохранённые данные `*this`.
 */

/*! \var type_abuse::SPtr<std::string> pm::regexp::Context::p_string
 *  \brief Указатель на принятую строку `*this`.
 */

/*! \var Context pm::regexp::default_context
 *  \brief Контекст, инициализирующийся по умолчанию к моменту начала работы функции `main`.
 *  
 *  **Не рекомендуется** изменять данные этого контекста, так как это может привести к непредсказуемым и ошибочным результатам разбора регулярными выражениями.
 */
