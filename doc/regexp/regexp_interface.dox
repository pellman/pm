/*! \file include/pm/regexp/regexp_interface.hpp
 *  \brief Содержит класс интерфейса разбора регулярным выраженем pm::regexp::RegexpInterface.
 *  \ingroup ModuleRegexp
 */

/*! \class pm::regexp::RegexpInterface
 *  \brief Класс интерфейса разбора регулярным выражением.
 *  \ingroup ModuleRegexp
 *  
 *  Содержит *методы разбора регулярным выражением* - вариации \ref GNNParsing "процедуры разбора", принимающие на вход \ref GNSTypes "строку", \ref GNSTypes "стандартный поток ввода" или \ref pm::stream::Stream "буферизованный поток" и - опционально - \ref pm::regexp::Context "регулярный контекст разбора", и возвращающие итог разбора.
 *  
 *  Все методы разбора перегружаются в производных классах - косвенно, через недокументированный виртуальный метод, в котором реализуется процедура разбора.
 *  
 *  В *интерфейсе по умолчанию* все методы разбора выполняются так: при вызове метод немедленно завершается и возвращает значение `false`.
 *  
 *  Неявные методы
 *  ==
 *  
 *  Конструктор по умолчанию: `RegexpInterface()`
 *  --
 *  
 *  Тривиальная инициализация (нечего инициализировать).
 *  
 *  Конструктор копирования: `RegexpInterface(const RegexpInterface & r)`
 *  --
 *  
 *  Тривиальное копирование (нечего копировать).
 *  
 *  Конструктор перемещения: `RegexpInterface(RegexpInterface && r)`
 *  --
 *  
 *  Тривиальное перемещение (нечего перемещать).
 *  
 *  Копирующее присваивание: `RegexpInterface & operator =(const RegexpInterface & r)`
 *  --
 *  
 *  Тривиальное присваивание (нечего присваивать).
 *  
 *  Перемещающее присваивание: `RegexpInterface & operator =(RegexpInterface && r)`
 *  --
 *  
 *  Тривиальное присваивание (нечего присваивать).
 */

/*! \fn virtual pm::regexp::RegexpInterface::~RegexpInterface()
 *  \brief Виртуальный деструктор. Перегружается производным классом при наследовании.
 */

/*! \fn bool pm::regexp::RegexpInterface::match(stream::Stream & s, const Context & context = default_context) const
 *  \brief Метод разбора буферизованного потока \p s в контексте \p context.
 *  
 *  Запускается процедура разбора потока \p s в контексте \p context.
 *  
 *  Возвращается итог разбора.
 */

/*! \fn bool pm::regexp::RegexpInterface::match(std::istream & s, const Context & context = default_context) const
 *  \brief Метод разбора стандартного потока ввода \p s в контексте \p context.
 *  
 *  Создаётся буферизованный поток S, в котором содержатся стандартный поток ввода \p s и пустой буфер.
 *  
 *  Выполняется метод разбора потока S в контексте \p context.
 *  
 *  Возвращается итог разбора выполненного метода.
 */

/*! \fn bool pm::regexp::RegexpInterface::match(const std::string & s, const Context & context = default_context) const
 *  \brief Метод разбора строки \p s в контексте \p context.
 *  
 *  Создаётся \ref GNSTypes "строковый поток ввода" S, содержащий копию строки \p s.
 *  
 *  Выполняется метод разбора потока S (как стандартного потока ввода) в контексте \p context.
 *  
 *  Возвращается итог разбора выполненного метода.
 */
