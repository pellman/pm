/*! \file include/pm/regexp/expressions/terminal/string.hpp
 *  \brief Интерфейс создания \ref PRLTString "готовых строковых регулярных выражений": принимающих строку заданного вида и записывающих эту строку в текущие данные.
 *  \ingroup ModuleRegexp
 *  
 *  Все выражения, создаваемые при помощи интерфейса согласно документации, \ref PRSafety "безопасны".
 *  
 *  \ref GNNParsing "Принимаемая строка": любая \ref GNSTypes "строка", удовлетворяющая *общему виду принимаемой строки*.
 *  
 *  \ref PRSafety "Способ изменения данных":
 *  - В текущие данные устанавливается значение типа std::string от аргумента - значения принятой строки (то есть принятая строка копируется в текущие данные).
 *  - Сохранённые данные не изменяются.
 *  
 *  В документации интерфейса описывается устройство \ref pm::regexp::RegexpInterface "метода разбора" \ref pm::regexp::Regexp "регулярного выражения", возвращаемого вызовом функции интерфейса.
 *  
 *  *Кратчайшая строка* заданного вида - это \ref GNSTypes "строка", такая что:
 *  - она имеет заданный вид;
 *  - никакое начало строки, не совпадающее со всей строкой, не подходит под заданный вид.
 *  
 *  *Длиннейшая строка* заданного вида - это \ref GNSTypes "строка", такая что:
 *  - она имеет заданный вид;
 *  - никакое продолжение строки добавлением следующих \ref GNSTypes "символов" \ref GNNStream "потока" в конец не подходит под заданный вид.
 *  
 *  \sa \ref PRList "Список готовых регулярных выражений"
 */

/*! \name Заданная строка
 *  \anchor PRGivenString
 *  Содержит строку \p good_string.
 *  
 *  Общий вид принимаемой строки: строка, равная \p good_string.
 */
//!\{

  /*! \fn Regexp pm::regexp::str(const std::string & good_string)
   */
  /*! \fn Regexp pm::regexp::str(std::string && good_string)
   */

//!\}

/*! \name Строка заданной длины
 *  \anchor PRStringOfGivenLength
 *  Содержит число \p len - длину.
 *  
 *  Общий вид принимаемой строки: строка s длины \p len
 *  - s.size() == len.
 */
//!\{

  /*! \fn Regexp pm::regexp::str(size_t len)
   */

//!\}

/*! \name Строка, обрамлённая заданными подстроками
 *  \anchor PREnclosedString
 *  Содержит две строки: *открывающую* \p opening_string, *закрывающую* \p closing_string.
 *  
 *  Общий вид принимаемой строки: кратчайшая строка s, разбивающаяся на три подстроки следующим образом: s = \p opening_string W \p closing_string, где W - произвольная строка (возможно, пустая).
 */
//!\{

  /*! \fn Regexp pm::regexp::enclose(const std::string & opening_string, const std::string & closing_string)
   */
  /*! \fn Regexp pm::regexp::enclose(const std::string & opening_string, std::string && closing_string)
   */
  /*! \fn Regexp pm::regexp::enclose(std::string && opening_string, const std::string & closing_string)
   */
  /*! \fn Regexp pm::regexp::enclose(std::string && opening_string, std::string && closing_string)
   */

//!\}

/*! \name Идентификатор языка C
 *  \anchor PRCId
 *  Общий вид принимаемой строки: длиннейшая непустая строка, являющаяся идентификатором языка C:
 *  - для первого символа c верно:
 *   - либо c == '_',
 *   - либо 'a' `<=` c и c `<=` 'z',
 *   - либо 'A' `<=` c и c `<=` 'Z';
 *  - для остальных символов d верно:
 *   - либо d == '_',
 *   - либо 'a' `<=` d и d `<=` 'z',
 *   - либо 'A' `<=` d и d `<=` 'Z',
 *   - либо '0' `<=` d и d `<=` '9'.
 */
//!\{

  /*! \fn Regexp pm::regexp::c_id()
   */

//!\}

/*! \name Строковая запись десятичного числа
 *  \anchor PRDecimalNumberString
 *  Общий вид принимаемой строки: длиннейшая непустая строка, состоящая только из символов десятичных цифр.
 *  
 *  Символ десятичной цифры - это любой символ c, удовлетворяющий неравенствам '0' `<=` c и c `<=` '9'.
 */
//!\{

  /*! \fn Regexp pm::regexp::decimal_string()
   */

//!\}

/*! \name Идентификатор без отдельного первого символа
 *  \anchor PRIdWithoutHeadLetter
 *  Содержит подвыражение \p letter, описывающее общий вид символов, из которых состоит идентификатор.
 *  
 *  Общий вид принимаемой строки: длиннейшая непустая строка, каждый символ которой принимается выражением \p letter.
 *  
 *  \pre Выражение \p letter удовлетворяет общим требованиям, предъявляемым к \ref include/pm/regexp/expressions/terminal/symbol.hpp "символьным выражениям".
 */
//!\{

  /*! \fn Regexp pm::regexp::id(const Regexp & letter)
   */

//!\}

/*! \name Идентификатор с отдельным первым символом
 *  \anchor PRIdWithHeadLetter
 *  Содержит:
 *  - подвыражение \p head_letter, описывающее общий вид первого символа идентификатора;
 *  - подвыражение \p tail_letter, описывающее общий вид символа идентификатора, не являющегося первым.
 *  
 *  Общий вид принимаемой строки: длиннейшая непустая строка, первый символ которой принимается выражением \p head_letter, и каждый следующий - выражением \p tail_letter.
 *  
 *  \pre Выражения \p head_letter и \p tail_letter удовлетворяют общим требованиям, предъявляемым к \ref include/pm/regexp/expressions/terminal/symbol.hpp "символьным выражениям".
 */
//!\{

  /*! \fn Regexp pm::regexp::id(const Regexp & head_letter, const Regexp & tail_letter)
   */

//!\}
