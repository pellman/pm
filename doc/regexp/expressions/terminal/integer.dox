/*! \file include/pm/regexp/expressions/terminal/integer.hpp
 *  \brief Интерфейс создания \ref PRLTInteger "готовых целочисленных регулярных выражений": принимающих строку заданного вида и записывающих в текущие данные число, соответствующее этой строке.
 *  \ingroup ModuleRegexp
 *  
 *  Все выражения, создаваемые при помощи интерфейса согласно документации, \ref PRSafety "безопасны".
 *  
 *  В документации интерфейса описывается устройство \ref pm::regexp::RegexpInterface "метода разбора" \ref pm::regexp::Regexp "регулярного выражения", возвращаемого вызовом функции интерфейса.
 *  
 *  *Символ десятичной цифры* - это \ref GNSTypes "символ" c, удовлетворяющий неравенствам '0' <= c и c <= '9'.
 *  
 *  *Длиннейшая строка* заданного вида - это \ref GNSTypes "строка", такая что:
 *  - она имеет заданный вид;
 *  - никакое продолжение строки добавлением следующих \ref GNSTypes "символов" разбираемого \ref GNNStream "потока" в конец не подходит под заданный вид.
 *  
 *  \sa \ref GNNParsing "Принимаемая строка"
 *  \sa \ref PRSafety "Способ изменения данных"
 *  \sa \ref PRList "Список готовых регулярных выражений"
 */

/*! \fn Regexp pm::regexp::digit()
 *  \anchor PRDecimalDigit
 *  \brief Десятичная цифра.
 *  
 *  Принимается любая строка длины 1, содержащая символ c десятичной цифры.
 *  
 *  Способ изменения данных:
 *  - В текущие данные устанавливается значение типа \p Int от аргумента (c - '0'), где c - символ принятой строки.
 *  - Сохранённые данные не изменяются.
 *  
 *  \pre Тип \p Int \ref GNSLifetime "инициализируем" от значения типа `char` и \ref GNSLifetime "уничтожаем".
 */

/*! \fn Regexp pm::regexp::decimal()
 *  \anchor PRDecimalNumber
 *  \brief Десятичное число.
 *  
 *  Принимается длиннейшая непустая строка, состоящая только из символов десятичных цифр.
 *  
 *  Способ изменения данных: сохранённые данные не изменяются, а текущие данные преобразуются следующим способом (более-менее стандартным для составления числа по его строковой записи):
 *  - В текущие данные устанавливается значение типа \p Int от аргумента (c - '0'), где c - первый символ принятой строки;
 *  - Последовательно выбираются символы принятой строки от второго до последнего, и для каждого выбранного символа c делается следующее:
 *   - инициализируется объект j типа \p Int от значения (c - '0');
 *   - выполняется присваивание cd *= 10, где cd - текущие данные;
 *   - выполняется присваивание cd += j, где cd - текущие данные.
 *  
 *  \pre Тип \p Int \ref GNSLifetime "инициализируем" от значения типа `char` и \ref GNSLifetime "уничтожаем".
 *  \pre Выражение i *= 10 с объектом типа \p Int в левой части корректно.
 *  \pre Выражение i += j с объектами типа \p Int в обеих частях корректно.
 */
