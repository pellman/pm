/*! \file include/pm/grammar/context.hpp
 *  \brief Содержит класс грамматического контекста разбора pm::grammar::Context и переменную грамматического контекста по умолчанию pm::grammar::default_context.
 *  \ingroup ModuleGrammar
 */

/*! \class pm::grammar::Context
 *  \brief Класс грамматического контекста разбора.
 *  \ingroup ModuleGrammar
 *  
 *  Используется в \ref pm::grammar::Grammar "методах разбора грамматикой".
 *  
 *  Содержит следующие \ref GNNData "данные" (*данные контекста*):
 *  - *принятую строку*, доступную через \ref pm::type_abuse::SPtr "стабильный указатель" на \ref GNSTypes "строку";
 *  - *совокупность данных* - в документации расценивается как бесконечный набор \ref pm::type_abuse::DPtr "указателей на данные" (\ref pm::dataset::Set "что такое совокупность данных");
 *  - *флаг активности строки* и *флаг активности данных*, доступные через \ref pm::regexp::subcontext::Activator "стабильные указатели на флаг активности" (\ref GNSTypes "что такое флаг").
 *  
 *  При работе с контекстом следует иметь в виду, что контекст - это набор указателей, и при действиями над контекстом производятся действия над указателями.
 *  В частности, при копировании контекста копируются указатели: копия контекста содержит те же данные (вплоть до размещения в памяти), что и исходный контекст.
 *  Создание копии данных производится явно специальными методами контекста и указателей.
 *  
 *  Особенности документации
 *  ==
 *  
 *  `*this` - это грамматический контекст, вызов метода которого документируется.
 *  
 *  `ds` - это совокупность данных контекста `*this`
 *  
 *  В документация используется терминология, введённая для \ref GNNData "данных", \ref pm::dataset::Set "совокупностей данных", \ref GNNTrickyPointer "хитрых указателей" в целом и \ref pm::type_abuse::SPtr "стабильных указателей" и \ref pm::type_abuse::DPtr "указателей на данные" в частности.
 *  
 *  Особые свойства класса
 *  ==
 *  
 *  \ref GNNValidState "Нестандартно-корректен".
 *  
 *  Неявные методы
 *  ==
 *  
 *  Конструктор по умолчанию: `Context()`
 *  
 *  Инициализировать контекст по умолчанию: новая пустая строка, новые пустые данные по каждому индексу в совокупности данных, пара новых опущенных флагов.
 *  
 *  Конструктор копирования: `Context(const Context & c)`
 *  --
 *  
 *  Инициализировать контекст, каждый указатель которого направлен на данные по соответствующему указателю контекста \p c.
 *  
 *  Конструктор перемещения: `Context(Context && c)`
 *  --
 *  
 *  Инициализировать контекст, каждый указатель которого направлен на данные по соответствующему указателю контекста \p c.
 *  
 *  Копирующее присваивание: `Context & operator =(const Context & c)`
 *  --
 *  
 *  Перенаправить каждый указатель `*this` на данные по соответствующему указателю контекста \p c.
 *  
 *  Перемещающее присваивание: `Context & operator =(Context && c)`
 *  --
 *  
 *  Перенаправить каждый указатель `*this` на данные по соответствующему указателю контекста \p c.
 *  
 *  Деструктор: `~Context()`
 *  --
 *  
 *  Стандартное значение.
 */

/*! \fn void pm::grammar::Context::detach()
 *  \brief Перенаправить каждый указатель `*this` на новую копию данных по этому указателю.
 *  
 *  \pre Для каждого индекса `i` верно: если `i`-е данные совокупности `ds` непусты, то тип этих данных \ref GNSLifetime "копируем".
 */

/*! \fn void pm::grammar::Context::detach_receive(const Context & context)
 *  \brief Перенаправить каждый указатель `*this` на новую копию данных по соответствующему указателю контекста \p context.
 *  
 *  \pre Для любого индекса `i` верно: если `i`-е данные совокупности контекста \p context непусты, то тип этих данных \ref GNSLifetime "копируем".
 */

/*! \fn void pm::grammar::Context::detach_unset()
 *  \brief Перенаправить каждый указатель `*this` на новые данные по умолчанию: пустая строка, пустые данные по каждому индексу в совокупности данных, опущенные флаги.
 */

/*! \fn void pm::grammar::Context::receive(const Context & context) const
 *  \brief Перезаписать данные по каждому указателю `*this` данными по соответствующему указателю контекста \p context.
 *  
 *  \pre Для любого индекса `i` верно: если `i`-е данные совокупности контекста \p context непусты, то тип этих данных \ref GNSLifetime "копируем".
 */

/*! \fn void pm::grammar::Context::swap(const Context & context) const
 *  \brief Обменять данные по каждому указателю `*this` и данные по соответствующему указателю контекста \p context.
 */

/*! \fn void pm::grammar::Context::unset() const
 *  \brief Сбросить данные по каждому указателю `*this`. Итоговые значения: пустая принятая строка, пустые данные по каждому индексу в совокупности данных, опущенные флаги.
 */

/*! \fn Context pm::grammar::Context::clone() const
 *  \brief Вернуть контекст, каждый указатель которого направлен на новую копию данных по соответствующему указателю контекста `*this`.
 *  
 *  \pre Для любого индекса `i` верно: если `i`-е данные совокупности `ds` непусты, то тип этих данных \ref GNSLifetime "копируем".
 */

/*! \fn void pm::grammar::Context::send(const Context & context) const
 *  \brief Перезаписать данные по каждому указателю контекста \p context данными по соответствующему указателю контекста `*this`.
 *  
 *  \pre Для любого индекса `i` верно: если `i`-е данные совокупности `ds` непусты, то тип этих данных \ref GNSLifetime "копируем".
 */

/*! \fn bool & pm::grammar::Context::data_flag() const
 *  \brief Вернуть флаг активности данных `*this`.
 */

/*! \fn bool & pm::grammar::Context::string_flag() const
 *  \brief Вернуть флаг активности строки `*this`.
 */

/*! \fn T & pm::grammar::Context::data(size_t i) const
 *  \brief Вернуть i-е данные совокупности `ds`.
 *  
 *  \pre i-е данные совокупности `ds` в момент вызова непусты и имеют тип \p T.
 */

/*! \fn const type_abuse::DPtr & pm::grammar::Context::ptr(size_t i) const
 *  \brief Вернуть i-й указатель совокупности `ds`.
 */

/*! \fn std::string & pm::grammar::Context::str() const
 *  \brief Вернуть принятую строку `*this`.
 */

/*! \var regexp::subcontext::Activator pm::grammar::Context::p_data_flag
 *  \brief Указатель на флаг активности данных.
 */

/*! \var regexp::subcontext::Activator pm::grammar::Context::p_string_flag
 *  \brief Указатель на флаг активности строки.
 */

/*! \var dataset::Set pm::grammar::Context::dataset
 *  \brief Совокупность данных `ds`.
 */

/*! \var type_abuse::SPtr<std::string> pm::grammar::Context::p_string
 *  \brief Указатель на принятую строку.
 */

/*! \var Context pm::grammar::default_context
 *  \brief Грамматический контекст, инициализирующийся по умолчанию к началу выполнения функции main.
 *  
 *  **Не рекомендуется** изменять данные этого контекста, так как это может привести к непредсказуемым и ошибочным результатам разбора грамматиками.
 */
