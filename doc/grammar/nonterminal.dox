/*! \file include/pm/grammar/nonterminal.hpp
 *  \brief Содержит класс нетерминалов pm::grammar::Nonterminal.
 *  \ingroup ModuleGrammar
 */

/*! \class pm::grammar::Nonterminal
 *  \brief Класс нетерминалов.
 *  \ingroup ModuleGrammar
 *  
 *  
 *  *Процедура грамматического разбора* - это \ref ParseProcedure "процедура разбора", в качестве контекста разбора принимающая на вход \ref pm::set::Set "совокупность данных".
 *  Устройство документированных методов нетерминала полностью определяется этой процедурой.
 *  
 *  Методы получения нетерминалов с заданными процедурами разбора предоставляются \ref pm::grammar::Grammar "грамматиками", и получаемый таким способом нетерминал особым образом \ref pm::grammar::Definition "соответствует" некоторому \ref pm::grammar::Definition "нетерминальному описанию" грамматики.
 *  
 *  Остальные детали устройства класса, кроме упомянутых на этой странице, в целом неважны для работы с нетерминалами.
 *  
 *  Особые свойства класса
 *  ==
 *  
 *  \ref DValidState "Нестандартно-корректен".
 *  
 *  Копирование, перемещение и присваивание нетерминалов настолько же "легковесно", насколько и соответствующие операции над умными указателями std::shared_ptr.
 *  
 *  Неявные методы
 *  ==
 *  
 *      Nonterminal(const Nonterminal & nt)
 *      Nonterminal(Nonterminal && nt)
 *  
 *  Инициализировать копию/перемещение значения нетерминала \p nt.
 *  
 *  
 *      Nonterminal & operator =(const Nonterminal & nt)
 *      Nonterminal & operator =(Nonterminal && nt)
 *  
 *  Присвоить нетерминалу \ref DSelf "self" копию/перемещение текущего значения \p nt.
 *  
 *  \return Self.
 *  
 *  
 *      ~Nonterminal()
 *  
 *  Уничтожить нетерминал.
 */

/*! \fn pm::grammar::Nonterminal::Nonterminal()
 *  \brief Инициализировать нетерминал, соответствующий \ref MGFalse "описанию неуспеха".
 */

/*! \fn bool pm::grammar::Nonterminal::match(std::istream & is) const
 *  \brief Метод разбора \ref DTypes "стандартного потока ввода" \p is.
 *  
 *  \pre Поток \p is \ref BusyStream "свободен".
 *  
 *  Создаются новый \ref pm::stream::Stream "поток разбора" S, инициализированный от \p is, и новая \ref pm::set::Set "совокупность данных" DS по умолчанию.
 *  
 *  Выполняется *подразбор*: процедура разбора потока S в совокупности данных DS.
 *  
 *  Поток S и совокупность DS уничтожаются.
 *  
 *  \return Итог подразбора.
 *  
 *  Замечание: по итогам разбора из потока is может быть прочитано больше символов, чем из инициализированного потока S (см. \ref pm::stream::Stream "документацию потоков разбора").
 */

/*! \fn bool pm::grammar::Nonterminal::match(std::istream & is, Context & context) const
 *  \brief Метод разбора \ref DTypes "стандартного потока ввода" \p is в \ref pm::grammar::Context "грамматическом контексте" \p context.
 *  
 *  \pre Поток \p is \ref BusyStream "свободен".
 *  
 *  Создаётся новый \ref pm::stream::Stream "поток разбора" S, инициализированный от \p is.
 *  
 *  Выполняется *подразбор*: процедура разбора потока S в совокупности данных контекста \p context.
 *  
 *  Содержимое контекста \p context изменяется согласно \ref pm::grammar::Context "смыслу контекста".
 *  
 *  Поток S уничтожается.
 *  
 *  \return Итог подразбора.
 *  
 *  Замечание: по итогам разбора из потока is может быть прочитано больше символов, чем из инициализированного потока S (см. \ref pm::stream::Stream "документацию потоков разбора").
 */

/*! \fn bool pm::grammar::Nonterminal::match(stream::Stream & is) const
 *  \brief Метод разбора \ref pm::stream::Stream "потока разбора" \p is.
 *  
 *  Создаётся новая \ref pm::set::Set "совокупность данных" DS по умолчанию.
 *  
 *  Выполняется *подразбор*: процедура разбора потока \p is в совокупности данных DS.
 *  
 *  Совокупность данных DS уничтожается.
 *  
 *  \return Итог подразбора.
 */

/*! \fn bool pm::grammar::Nonterminal::match(stream::Stream & is, Context & context) const
 *  \brief Метод разбора \ref pm::stream::Stream "потока разбора" \p is в \ref pm::grammar::Context "грамматическом контексте" \p context.
 *  
 *  Выполняется *подразбор*: процедура разбора потока \p is в контексте \p context.
 *  
 *  Содержимое контекста \p context изменяется согласно \ref pm::grammar::Context "смыслу контекста".
 *  
 *  \return Итог подразбора.
 */

/*! \fn bool pm::grammar::Nonterminal::match(stream::Stream & is, set::Set & ds) const
 *  \brief Процедура грамматического разбора \ref pm::stream::Stream "потока разбора" \p is на \ref pm::set::Set "совокупности данных" \p ds.
 *  
 *  \return Итог разбора.
 */
