/*! \file include/pm/grammar/actions.hpp
 *  \brief Содержит интерфейс создания \ref PGList "готовых грамматических действий".
 *  \ingroup ModuleGrammar
 *  
 *  В документации интерфейса описывается вид \ref pm::grammar::ActionInterface "метода разбора" \ref pm::stream::Stream "буферизованного потока" s на \ref pm::grammar::Grammar "грамматике" g в \ref pm::grammar::Context "грамматическом контексте разбора" c \ref pm::grammar::Action "грамматическим действием", возвращаемым вызовом функции интерфейса.
 *  
 *  При создании согласно документации все возвращаемые действия \ref PGSafety "слабо-безопасны".
 *  
 *  ds - обозначение \ref pm::dataset::Set "совокупности данных" контекста c.
 *  
 *  \sa \ref GNNParsing "Принимаемая строка"
 *  \sa \ref PGSafety "Способ изменения данных"
 *  \sa \ref PGList "Список готовых грамматических действий и их определений"
 */


/*! \name Неуспех
 *  \anchor PGFail
 *  Немедленно возвращается неуспех.
 *  
 *  Принимаемая строка всегда пуста.
 *  
 *  Символы не читаются из потока и не возвращаются в поток.
 *  
 *  Способ изменения данных: данные совокупности не изменяются.
 */
//!\{

  /*! \fn Action pm::grammar::ac_false()
   */

//!\}

/*! \name Успех
 *  \anchor PGSuccess
 *  Немедленно возвращается успех.
 *  
 *  Принимаемая строка всегда пуста.
 *  
 *  Символы не читаются из потока и не возвращаются в поток.
 *  
 *  Способ изменения данных: данные совокупности не изменяются.
 */
//!\{

  /*! \fn Action pm::grammar::ac_true()
   */

//!\}

/*! \name Перенаправление
 *  \anchor PGRedirect
 *  Содержит \ref GNSTypes "индекс" \p index грамматического действия.
 *  
 *  Выполняется разбор потока s на грамматике g в контексте c действием g[\p index], возвращается итог этого разбора.
 *  
 *  Принимаемая строка: строка, принимаемая действием g[\p index].
 *  
 *  Способ изменения данных: совпадает со способом изменения данных действием g[\p index].
 *  
 *  \pre В грамматике содержится действие с индексом \p index.
 *  
 *  \sa \ref pm::grammar::Grammar "g[i]"
 */
//!\{

  /*! \fn Action pm::grammar::ac(size_t index)
   */

//!\}

/*! \name Регулярное выражение без данных
 *  \anchor PGRe
 *  Содержит \ref pm::regexp::Regexp "регулярное выражение" \p r.
 *  
 *  Разбор действием устроен так:
 *  - Если в g содержится \ref pm::grammar::Grammar "пробельное выражение", то многократно - до первого неуспеха - запускается \ref pm::regexp::RegexpInterface "разбор" потока s этим выражением.
 *  - Запускается \ref pm::regexp::RegexpInterface "разбор" потока s выражением \p r, и возвращается итог этого разбора.
 *  
 *  Принимаемая строка: конкатенация строк, принятых всеми разборами: \f$ s_1 \dots s_k s \f$, где:
 *  - \f$ s_i \f$ - строка, принятая по итогам \f$ i \f$-го разбора пробельным выражением;
 *  - \f$ k \f$ - общее число успешных разборов пробельным выражением;
 *  - \f$ s \f$ - строка, принятая по итогам разбора выражением \p r.
 *  
 *  Способ изменения данных: данные не изменяются.
 *  
 *  \pre Выражение \p r \ref PRSafety "безопасно".
 *  
 *  \sa \ref PRList "Список готовых регулярных выражений"
 */
//!\{

  /*! \fn Action pm::grammar::ac(const regexp::Regexp & r)
   */

  /*! \fn Action pm::grammar::ac(regexp::Regexp && r)
   */

//!\}

/*! \name Регулярное выражение с данными
 *  \anchor PGReData
 *  Содержит \ref pm::regexp::Regexp "регулярное выражение" \p r и \ref GNSTypes "индекс" данных \p data_index в совокупности данных ds.
 *  
 *  Разбор действием устроен так:
 *  - Если в g содержится \ref pm::grammar::Grammar "пробельное выражение", то многократно - до первого неуспеха - запускается \ref pm::regexp::RegexpInterface "разбор" потока s этим выражением.
 *  - Создаётся \ref pm::regexp::Context "регулярный контекст" rc с указателем на текущие данные, направленным на данные ds[[\p data_index]].
 *  - Запускается \ref pm::regexp::RegexpInterface "разбор" потока s выражением \p r в контексте rc, и возвращается итог этого разбора.
 *  
 *  Принимаемая строка: конкатенация строк, принятых всеми разборами: \f$ s_1 \dots s_k s \f$, где:
 *  - \f$ s_i \f$ - строка, принятая по итогам \f$ i \f$-го разбора пробельным выражением;
 *  - \f$ k \f$ - общее число успешных разборов пробельным выражением;
 *  - \f$ s \f$ - строка, принятая по итогам разбора выражением \p r.
 *  
 *  Способ изменения данных:
 *  - успех: данные ds[[\p data_index]] \ref PRSafety "изменяются согласно выражению" \p r; остальные данные совокупности ds не изменяются;
 *  - неуспех: данные совокупности ds не изменяются.
 *  
 *  \pre Выражение \p r \ref PRSafety "безопасно".
 *  
 *  \sa \ref pm::dataset::Set "ds[[i]]"
 *  \sa \ref PRList "Список готовых регулярных выражений"
 */
//!\{

  /*! \fn Action pm::grammar::ac(const regexp::Regexp & r, size_t data_index)
   */

  /*! \fn Action pm::grammar::ac(regexp::Regexp && r, size_t data_index)
   */

//!\}

/*! \name Функция над совокупностью данных
 *  \anchor PGFunction
 *  Содержит \ref pm::dataset::Function "функцию над совокупностью данных" \p f.
 *  
 *  Принимаемая строка всегда пуста.
 *  Из потока s не читается ни одного символа, в него не возвращается ни один символ.
 *  
 *  Разбор всегда успешен.
 *  
 *  Способ изменения данных: функция \p f \ref pm::dataset::FunctionInterface "применяется" к совокупности данных ds.
 *  
 *  \sa \ref PDatasetFunction "Список готовых функций над совокупностью данных и их определений"
 */
//!\{

  /*! \fn Action pm::grammar::ac(const dataset::Function & f)
   */

  /*! \fn Action pm::grammar::ac(dataset::Function && f)
   */

//!\}

/*! \name Перенаправление с откатом
 *  \anchor PGFailFunction
 *  Содержит:
 *  - \ref GNSTypes "индекс" \p index грамматического действия;
 *  - \ref pm::dataset::Function "функцию над совокупностью данных" \p f.
 *  
 *  Разбор перенаправлением с откатом устроен так:
 *  - Выполняется *подразбор*: разбор потока s на грамматике g в контексте c действием g[\p index].
 *  - Если подразбор неуспешен, то функция \p f \ref pm::dataset::FunctionInterface "применяется" к совокупности данных ds.
 *  - Возвращается итог подразбора.
 *  
 *  Принимаемая строка: строка, принимаемая действием g[\p index].
 *  
 *  Способ изменения данных:
 *  - данные совокупности ds изменяются подразбором (как успешным, так и неуспешным);
 *  - затем, если подразбор неуспешен, к данным совокупности ds применяется функция \p f.
 *  
 *  \sa \ref pm::grammar::Grammar "g[i]"
 *  \sa \ref PDatasetFunction "Список готовых функций над совокупностью данных и их определений"
 */
//!\{

  /*! \fn Action pm::grammar::ac(size_t index, const dataset::Function & f)
   */

  /*! \fn Action pm::grammar::ac(size_t index, dataset::Function && f)
   */

//!\}

/*! \name Альтернатива
 *  \anchor PGAlternative
 *  Содержит упорядоченный набор I \ref GNSTypes "индексов" грамматических действий.
 *  
 *  Разбор альтернативой устроен так:
 *  - последовательно по порядку выбираются индексы набора I, и для каждого выбранного индекса i выполняется *подразбор*: разбор потока s на грамматике g в контексте c действием g[i];
 *  - если очередной подразбор оказался успешным, то разбор альтернативой немедленно завершается успехом;
 *  - если все подразборы оказались неуспешными, то разбор альтернативой завершается неуспехом.
 *  
 *  Принимаемая строка: строка, принимаемая успешным подразбором.
 *  
 *  Способ изменения данных: данные последовательно изменяются выполняемыми подразборами - как всеми неуспешными, так и успешным.
 *  
 *  \pre В грамматике содержится действие с каждым индексом из набора I.
 *  
 *  \sa \ref pm::grammar::Grammar "g[i]"
 */
//!\{

  /*! \fn Action pm::grammar::alt(const std::list<size_t> & indexes)
   *  \brief Набор индексов: содержащийся в списке \p indexes, в том же порядке
   */

  /*! \fn Action pm::grammar::alt(std::list<size_t> && indexes)
   *  \brief Набор индексов: содержащийся в списке \p indexes, в том же порядке
   */

  /*! \fn Action pm::grammar::alt(Indexes ... indexes)
   *  \brief Набор индексов: содержащийся в списке {\p indexes}, в том же порядке.
   *  Эквивалентно вызову pm::grammar::alt(std::list<size_t>{indexes ...})
   *  Позволяет вместо pm::grammar::alt({i1, ..., ik}) писать pm::grammar::alt(i1, ..., ik): на одну пару скобок меньше.
   */

//!\}

/*! \name Правило
 *  \anchor PGRule
 *  Содержит упорядоченный набор \ref GNSTypes "индексов" грамматических действий I.
 *  
 *  Разбор правилом устроен так:
 *  - последовательно по порядку выбираются индексы набора I, и для каждого выбранного индекса i выполняется *подразбор*: разбор потока s на грамматике g в контексте c действием g[i];
 *  - если очередной подразбор оказался неуспешным, то разбор правилом немедленно завершается неуспехом;
 *  - если все подразборы оказались успешными, то разбор правилом завершается успехом.
 *  
 *  Принимаемая строка: конкатенация строк, принятых подразборами: \f$ s_1 s_2 \dots s_k \f$, где:
 *  - \f$ s_i \f$ - строка, принятая \f$ i \f$-м подразбором;
 *  - \f$ k \f$ - общее число действий в наборе I.
 *  
 *  Способ изменения данных: данные последовательно изменяются выполняемыми подразборами - как всеми успешными, так и неуспешным.
 *  
 *  \pre В грамматике содержится действие с каждым индексом из набора I.
 *  
 *  \sa \ref pm::grammar::Grammar "g[i]"
 */
//!\{

  /*! \fn Action pm::grammar::rule(const std::list<size_t> & indexes)
   *  \brief Набор индексов: содержащийся в списке \p indexes, в том же порядке
   */

  /*! \fn Action pm::grammar::rule(std::list<size_t> && indexes)
   *  \brief Набор индексов: содержащийся в списке \p indexes, в том же порядке
   */

  /*! \fn Action pm::grammar::rule(Indexes ... indexes)
   *  \brief Набор индексов: содержащийся в списке {\p indexes}, в том же порядке.
   *  Эквивалентно вызову pm::grammar::rule(std::list<size_t>{indexes ...})
   *  Позволяет вместо pm::grammar::rule({i1, ..., ik}) писать pm::grammar::rule(i1, ..., ik): на одну пару скобок меньше.
   */

//!\}

/*! \name Опционал
 *  \anchor PGOptional
 *  Содержит \ref GNSTypes "индекс" \p index грамматического действия.
 *  
 *  Выполняется разбор потока s на грамматике g в контексте c действием g[\p index].
 *  
 *  Разбор всегда успешен.
 *  
 *  Принимаемая строка:
 *  - строка, принимаемая действием g[\p index], если разбор этим действием успешен;
 *  - пустая строка, иначе.
 *  
 *  Способ изменения данных: совпадает со способом изменения данных действием g[\p index].
 *  
 *  \pre В грамматике содержится действие с индексом \p index.
 *  
 *  \sa \ref pm::grammar::Grammar "g[i]"
 */
//!\{

  /*! \fn Action pm::grammar::opt(size_t index)
   */

//!\}

/*! \name Звезда Клини
 *  \anchor PGStar
 *  Содержит \ref GNSTypes "индекс" \p index грамматического действия.
 *  
 *  Многократно - до первого неуспеха - выполняется *подразбор*: разбор потока s на грамматике g в контексте c действием g[\p index].
 *  
 *  Разбор всегда успешен.
 *  
 *  Принимаемая строка: конкатенация строк, принятых подразборами: \f$ s_1 s_2 \dots s_k \f$, где:
 *  - \f$ s_i \f$ - строка, принятая \f$ i \f$-м подразбором;
 *  - \f$ k \f$ - общее число успешных подразборов.
 *  
 *  Способ изменения данных: данные последовательно изменяются выполняемыми подразборами - как всеми успешными, так и неуспешным (последним).
 *  
 *  \pre В грамматике содержится действие с индексом \p index.
 *  
 *  \sa \ref pm::grammar::Grammar "g[i]"
 */
//!\{

  /*! \fn Action pm::grammar::star(size_t index)
   */

//!\}
