/*! \file include/pm/set/definition.hpp
 *  \brief Содержит класс функциональных описаний pm::set::Definition.
 *  \ingroup ModuleSet
 */

/*! \class pm::set::Definition
 *  \brief Класс функциональных описаний.
 *  \ingroup ModuleSet
 *  
 *  
 *  Функциональные описания используются в некоторых \ref MGSpec "реализованных нетерминальных описаниях" при работе с \ref pm::grammar::Grammar "грамматиками".
 *  
 *  *Процедура преобразования данных* - это процедура, принимающая на вход \ref pm::set::Set "совокупность данных" (и взаимодействующая с этой совокупностью, изменяя содержащиеся в ней \ref pm::data::Data "данные").
 *  
 *  Функциональному описанию на заданном \ref pm::set::Domain "домене" особым образом \ref MSSpec "соответствует" процедура преобразования данных.
 *  
 *  Для функционального описания определено \ref DSet "множество" *имён данных* - \ref DTypes "строк", содержащихся в описании и обозначающих имена домена.
 *  
 *  Остальные детали устройства класса, кроме упомянутых на этой странице, в целом неважны для работы с функциональными описаниями в рамках грамматик.
 *  
 *  Особые свойства класса
 *  ==
 *  
 *  \ref DValidState "Нестандартно-корректен".
 *  
 *  Копирование, перемещение и присваивание описаний настолько же "легковесно", насколько и соответствующие операции над умными указателями std::shared_ptr.
 *  
 *  Неявные методы
 *  ==
 *  
 *      Definition(const Definition & df)
 *      Definition(Definition && df)
 *  
 *  Инициализировать копию/перемещение текущего значения описания \p df.
 *  
 *  
 *      Definition & operator =(const Definition & df)
 *      Definition & operator =(Definition && df)
 *  
 *  Присвоить описанию \ref DSelf "self" текущее значение описания \p df.
 *  
 *  \return Self.
 *  
 *  
 *      ~Definition()
 *  
 *  Уничтожить описание.
 */

/*! \fn pm::data::Definition::Definition()
 *  \brief Инициализировать \ref MSTrivial "описание тривиальной функции".
 */
