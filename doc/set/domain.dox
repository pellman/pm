/*! \file include/pm/set/domain.hpp
 *  \brief Содержит класс доменов pm::set::Domain.
 *  \ingroup ModuleSet
 */

/*! \class pm::set::Domain
 *  \brief Класс доменов.
 *  \ingroup ModuleSet
 *  
 *  
 *  Домен - это \ref DSet "множество" Dom *имён* (\ref DTypes "строк"), пронумерованных \ref DTypes "индексами" 0, 1, ..., |Dom|-1 (неравные строки - различными индексами).
 *  
 *  Для строки name, индекса i и домена Dom записью Dom[name] обозначается номер имени name, а записью Dom[i] - имя с номером i.
 *  
 *  Особые свойства класса
 *  ==
 *  
 *  \ref DValidState "Нестандартно-корректен".
 *  
 *  \ref DRangeBasedFor "Совместим с циклом по коллекции":
 *  - перебираются все имена в порядке возрастания номеров;
 *  - допустимые виды перебора в цикле по коллекции:
 *   - `for(const std::string & name : Dom)` и
 *   - `for(std::string name : Dom)`.
 *  
 *  Неявные методы
 *  ==
 *  
 *      ~Domain()
 *  
 *  Уничтожить домен.
 */

/*! \fn pm::set::Domain::Domain()
 *  \brief Инициализировать пустой домен.
 */

/*! \fn pm::set::Domain::Domain(const Domain & dom)
 *  \brief Инициализировать домен, содержащий копии имён домена \p dom, пронумерованные тем же способом, что и в \p dom.
 */

/*! \fn pm::set::Domain::Domain(Domain && dom)
 *  \brief Инициализировать домен, переместив в него имена домена \p dom и пронумеровав их так же, как в \p dom.
 */

/*! \fn Domain & pm::set::Domain::operator =(const Domain & dom)
 *  \brief Удалить из \ref DSelf "self" все имена и добавить в него копии имён домена \p dom, пронумерованные тем же способом, что и в \p dom.
 *  
 *  \return Self.
 */

/*! \fn Domain & pm::set::Domain::operator =(Domain && dom)
 *  \brief Удалить из \ref DSelf "self" все имена и переместить в него имена домена \p dom, пронумеровав их так же, как в \p dom.
 *  
 *  \return Self.
 */

/*! \fn const std::string & pm::set::Domain::operator [](size_t index) const
 *  \brief Вернуть ссылку на имя \ref DSelf "self"[\p index].
 *  
 *  \pre |self| > \p index.
 */

/*! \fn size_t pm::set::Domain::operator [](const std::string & name) const
 *  \brief Вернуть номер \ref DSelf "self"[\p name].
 *  
 *  \pre В домене содержится имя, равное \p name.
 */

/*! \fn size_t pm::set::Domain::add(const std::string & name)
 *  \brief Добавить имя \p name в домен.
 *  
 *  Если в домене содержится имя, равное \p name, то домен не изменяется.
 *  Иначе в домен добавляется имя, равное \p name, и ему присваивается номер, равный размеру домена до добавления.
 *  Номера остальных имён сохраняются.
 *  
 *  Если домен изменяется при добавлении, то все \ref pm::set::Domain::Iterator "итераторы", указывающие на домен, становятся некорректными.
 *  
 *  \return \ref DSelf "Self"[\p name] после добавления.
 */

/*! \fn size_t pm::set::Domain::add(std::string && name)
 *  \brief Переместить имя \p name в домен.
 *  
 *  Если в домене содержится имя, равное \p name, то домен не изменяется.
 *  Иначе в домен добавляется (перемещением) имя \p name, и ему присваивается номер, равный размеру домена до добавления.
 *  Номера остальных имён сохраняются.
 *  
 *  Если домен изменяется при добавлении, то все \ref pm::set::Domain::Iterator "итераторы", указывающие на домен, становятся некорректными.
 *  
 *  \return \ref DSelf "Self"[\p name] после добавления.
 */

/*! \fn void pm::set::Domain::clear()
 *  \brief Удалить все имена из домена.
 *  
 *  Все \ref pm::set::Domain::Iterator "итераторы", указывающие на домен, становятся некорректными.
 */

/*! \fn void pm::set::Domain::erase(size_t index)
 *  \brief Удалить имя с номером \p index из домена.
 *  
 *  Если |\ref DSelf "self"| <= \p index, то домен не изменяется.
 *  Иначе имя с номером \p index удаляется из домена, и нумерация оставшихся имён произвольно изменяется.
 *  
 *  Если домен изменяется при удалении, то все \ref pm::set::Domain::Iterator "итераторы", указывающие на домен, становятся некорректными.
 */

/*! \fn void pm::set::Domain::erase(const std::string & name)
 *  \brief Удалить имя \p name из домена.
 *  
 *  Если домен содержит имя, равное \p name, то это имя удаляется из домена, и нумерация оставшихся имён произвольно изменяется.
 *  Иначе домен не изменяется.
 *  
 *  Если домен изменяется при удалении, то все \ref pm::set::Domain::Iterator "итераторы", указывающие на домен, становятся некорректными.
 */

/*! \fn Iterator pm::set::Domain::begin() const
 *  \brief Вернуть \ref pm::set::Domain::Iterator "итератор", указывающий на \ref pm::set::Domain::Iterator "начало домена".
 */

/*! \fn bool pm::set::Domain::contains(const std::string & name) const
 *  \brief Вернуть true <=> в домене содержится имя, равное \p name.
 */

/*! \fn bool pm::set::Domain::empty() const
 *  \brief Вернуть true <=> домен пуст.
 */

/*! \fn Iterator pm::set::Domain::end() const
 *  \brief Вернуть \ref pm::set::Domain::Iterator "итератор", указывающий на \ref pm::set::Domain::Iterator "конец домена".
 */

/*! \fn size_t pm::set::Domain::size() const
 *  \brief Вернуть размер домена.
 */

/*! \fn size_t pm::set::Domain::index(const std::string & name) const
 *  \brief Вернуть номер имени, равного \p name.
 *  
 *  \pre В домене содержится имя, равное \p name.
 */

/*! \fn const std::string & pm::set::Domain::name(size_t index) const
 *  \brief Вернуть ссылку на имя с номером \p index.
 *  
 *  \pre |\ref DSelf "Self"| > \p index.
 */

/*! \class pm::set::Domain::Iterator
 *  \brief Класс итераторов \ref pm::set::Domain "доменов".
 *  
 *  
 *  В рамках предоставляемого интерфейса итераторы аналогичны итераторам стандартных контейнеров и предназначены для перебора имён доменов в порядке возрастания их номеров - в частности, в \ref DRangeBasedFor "цикле по коллекции".
 *  
 *  *Элементами перебора* домена являются его имена, а также особый элемент - *конец домена*.
 *  Элементы упорядочены следующим образом:
 *  сначала все имена домена в порядке возрастания их номером, и затем конец домена.
 *  
 *  *Начало домена* - это его первый элемент перебора:
 *  если домен непуст, то имя с номером 0, а если пуст, то конец домена.
 *  
 *  *Корректный итератор* - это итератор, указывающий на некоторый элемент перебора некоторого домена.
 *  *Разыменовываемый итератор* - это корректный итератор, указывающий на некоторое имя домена.
 *  
 *  Некорректный итератор запрещено разыменовывать, изменять и сравнивать.
 *  
 *  Особые свойства класса
 *  ==
 *  
 *  \ref DValidState "Стандартно-корректен".
 *  
 *  Неявные методы
 *  ==
 *  
 *      Iterator()
 *  
 *  Инициализировать некорректный итератор.
 *  
 *  
 *      Iterator(const Iterator & it)
 *      Iterator(Iterator && it)
 *  
 *  Инициализировать копию/перемещение итератора \p it.
 *  
 *  При перемещении итератор \p it становится некорректным.
 *  
 *  
 *      Iterator & operator =(const Iterator & it)
 *      Iterator & operator =(Iterator && it)
 *  
 *  Перезаписать значение \ref DSelf "self" копией/перемещением значения итератора \p it.
 *  
 *  При перемещении итератор \p it становится некорректным.
 *  
 *  \return Self.
 *  
 *  
 *      ~Iterator()
 *  
 *  Уничтожить итератор.
 */

/*! \fn Iterator & pm::set::Domain::Iterator::operator ++()
 *  \brief Перенаправить итератор на следующий элемент перебора домена.
 *  
 *  \pre Итератор разыменовываем.
 *  \return \ref DSelf "Self".
 */

/*! \fn Iterator pm::set::Domain::Iterator::operator ++(int)
 *  \brief Перенаправить итератор на следующий элемент перебора домена.
 *  
 *  \pre Итератор разыменовываем.
 *  \return Значение итератора до перенаправления.
 */

/*! \fn Iterator & pm::set::Domain::Iterator::operator --()
 *  \brief Перенаправить итератор на предыдущий элемент перебора домена.
 *  
 *  \pre Итератор корректен и не указывает на начало домена.
 *  \return \ref DSelf "Self".
 */

/*! \fn Iterator pm::set::Domain::Iterator::operator --(int)
 *  \brief Перенаправить итератор на предыдущий элемент перебора домена.
 *  
 *  \pre Итератор корректен и не указывает на начало домена.
 *  \return Значение итератора до перенаправления.
 */

/*! \fn bool pm::set::Domain::Iterator::operator ==(const Iterator & it) const
 *  \brief Вернуть true <=> \ref DSelf "self" и \p it указывают на один элемент перебора.
 *  
 *  \pre Итераторы self и \p it корректны и указывают на элементы перебора одного домена.
 */

/*! \fn bool pm::set::Domain::Iterator::operator !=(const Iterator & it) const
 *  \brief Вернуть true <=> \ref DSelf "self" и \p it указывают на различные элементы перебора.
 *  
 *  \pre Итераторы self и \p it корректны и указывают на элементы перебора одного домена.
 */

/*! \fn bool pm::set::Domain::Iterator::operator >(const Iterator & it) const
 *  \brief Вернуть true <=> \ref DSelf "self" указывает на элемент перебора, больший по порядку, чем элемент итератора \p it.
 *  
 *  \pre Итераторы self и \p it корректны и указывают на элементы перебора одного домена.
 */

/*! \fn bool pm::set::Domain::Iterator::operator >=(const Iterator & it) const
 *  \brief Вернуть true <=> \ref DSelf "self" указывает на элемент перебора, больший либо равный по порядку, чем элемент итератора \p it.
 *  
 *  \pre Итераторы self и \p it корректны и указывают на элементы перебора одного домена.
 */

/*! \fn bool pm::set::Domain::Iterator::operator <(const Iterator & it) const
 *  \brief Вернуть true <=> \ref DSelf "self" указывает на элемент перебора, меньший по порядку, чем элемент итератора \p it.
 *  
 *  \pre Итераторы self и \p it корректны и указывают на элементы перебора одного домена.
 */

/*! \fn bool pm::set::Domain::Iterator::operator <=(const Iterator & it) const
 *  \brief Вернуть true <=> \ref DSelf "self" указывает на элемент перебора, меньший либо равный по порядку, чем элемент итератора \p it.
 *  
 *  \pre Итераторы self и \p it корректны и указывают на элементы перебора одного домена.
 */

/*! \fn const std::string & pm::set::Domain::Iterator::operator *() const
 *  \brief Вернуть ссылку на текущий элемент перебора итератора.
 *  
 *  \pre Итератор разыменовываем.
 */
