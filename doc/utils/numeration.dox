/*! \file include/pm/utils/numeration.hpp
 *  \brief Содержит шаблонный класс нумерации pm::utils::Numeration.
 *  \ingroup ModuleUtils
 */

/*! \class pm::utils::Numeration
 *  \brief Класс нумерации.
 *  \ingroup ModuleUtils
 *  
 *  \pre Тип \p T \ref GNSComparability "<-сравним" и \ref GNSLifetime "уничтожаем".
 *  
 *  *Нумерация* - это биективное отображение \f$ \varphi : S \to \{0, 1, \dots, |S| - 1\} \f$, где \f$ S \f$ - произвольное конечное \ref GNSSet "множество", содержащее объекты типа \p T - *типа нумерации*.
 *  
 *  *Область определения* \f$ Dom(\varphi) \f$ нумерации \f$ \varphi \f$ - это множество \f$ S \f$.
 *  
 *  *Индекс* (*образ*) \f$ \varphi(s) \f$ элемента \f$ s \f$ множства \f$ S \f$ в нумерации \f$ \varphi \f$ - это число, сопоставляемое \f$ s \f$ нумерацией.
 *  
 *  *Прообраз* \f$ \varphi^-(i) \f$ индекса \f$ i \f$ в нумерации \f$ \varphi \f$ - это элемент \f$ s \f$ области определения, такой что \f$ \varphi(s) = i \f$.
 *  
 *  Особенности документации
 *  ==
 *  
 *  В описании методов \f$ N \f$ означает нумерацию до вызова метода, и \f$ N' \f$ - нумерацию после вызова.
 *  
 *  Особые свойства класса
 *  ==
 *  
 *  \ref GNNValidState "Нестандартно-корректен".
 *  
 *  \ref GNSRangeBasedFor "Совместим с циклом по коллекции":
 *  - перебираются элементы области определения по возрастанию их образов;
 *  - допустимые виды перебора в цикле по коллекции (`N` - объект нумерации):
 *   - `for(const T & var : N)` - всегда;
 *   - `for(T var : N)` - если тип `T` копируем через присваивание.
 *  
 *  Неявные методы
 *  ==
 *  
 *  Конструктор по умолчанию: `Numeration()`
 *  --
 *  
 *  Инициализировать нумерацию с пустой областью определения.
 *  
 *  Конструктор копирования: `Numeration(const Numeration & n)`
 *  --
 *  
 *  Инициализировать нумерацию \f$ N \f$, совпадающую с \p n.
 *  
 *  В \f$ Dom(N) \f$ записываются копии объектов, содержащихся в \f$ Dom(n) \f$.
 *  
 *  \pre Тип \p T копируем.
 *  
 *  Конструктор перемещения: `Numeration(Numeration && n)`
 *  --
 *  
 *  Инициализировать нумерацию \f$ N \f$, совпадающую с \p n.
 *  
 *  Объекты, содержащиеся в \f$ Dom(n) \f$, перемещаются в \f$ Dom(N) \f$.
 *  
 *  \pre Тип \p T перемещаем.
 *  
 *  Копирующее присваивание: `Numeration & operator =(const Numeration & n)`
 *  --
 *  
 *  Сделать нумерацию совпадающей с \p n.
 *  
 *  В \f$ Dom(N) \f$ записываются копии объектов, содержащихся в \f$ Dom(n) \f$.
 *  
 *  \pre Тип \p T копируем.
 *  
 *  Перемещающее присваивание: `Numeration & operator =(Numeration && n)`
 *  --
 *  
 *  Сделать нумерацию совпадающей с \p n.
 *  
 *  Объекты, содержащиеся в \f$ Dom(n) \f$, перемещаются в \f$ Dom(N) \f$.
 *  
 *  \pre Тип \p T перемещаем.
 *  
 *  Деструктор: `~Numeration()`
 *  --
 *  
 *  Стандартное значение.
 *  
 *  Все объекты, содержащиеся в \f$ Dom(n) \f$, уничтожаются.
 */

/*! \fn const T & pm::utils::Numeration::operator [](size_t i) const
 *  \brief Вернуть прообраз числа \p i.
 *  
 *  \return \f$ N^-(i) \f$.
 *  \pre \f$ |Dom(N)| > i \f$.
 */

/*! \fn void pm::utils::Numeration::clear()
 *  \brief Обнулить область определения.
 *  
 *  \f$ Dom(N') = \emptyset \f$.
 */

/*! \fn void pm::utils::Numeration::erase(const T & el)
 *  \brief Удалить объект, равный \p el, из области определения.
 *  
 *  Если \f$ el \notin Dom(N) \f$, то \f$ N' \f$ совпадает с \f$ N \f$.
 *  
 *  Если \f$ el \in Dom(N) \f$, то:
 *  - \f$ Dom(N') = Dom(N) \setminus \{ el \}\f$;
 *  - образы элементов области определения \f$ N' \f$ не специфицированы (могут измениться произвольным образом).
 */

/*! \fn size_t pm::utils::Numeration::insert(const T & el)
 *  \brief Добавить копию объекта \p el в область определения.
 *  
 *  Если \f$ el \in Dom(N) \f$, то \f$ N' \f$ совпадает с \f$ N \f$.
 *  
 *  Если \f$ el \notin Dom(N) \f$, то:
 *  - \f$ Dom(N') = Dom(N) \cup \{ el \} \f$;
 *  - \f$ N'(el) = |Dom(N)| \f$;
 *  - образы всех объектов из \f$ Dom(N) \f$ совадают в \f$ N \f$ и \f$ N' \f$.
 *  
 *  \return \f$ N'(el) \f$
 *  \pre Тип \p T \ref GNSLifetime "копируем".
 */

/*! \fn size_t pm::utils::Numeration::insert(T && el)
 *  \brief Добавить перемещение объекта \p el в область определения.
 *  
 *  Если \f$ el \in Dom(N) \f$, то \f$ N' \f$ совпадает с \f$ N \f$.
 *  
 *  Если \f$ el \notin Dom(N) \f$, то:
 *  - \f$ Dom(N') = Dom(N) \cup \{ el \} \f$;
 *  - \f$ N'(el) = |Dom(N)| \f$;
 *  - образы всех объектов из \f$ Dom(N) \f$ совадают в \f$ N \f$ и \f$ N' \f$.
 *  
 *  \return \f$ N'(el) \f$
 *  \pre Тип \p T \ref GNSLifetime "перемещаем".
 */

/*! \fn const T & pm::utils::Numeration::at(size_t i) const
 *  \brief Вернуть прообраз числа \p i.
 *  
 *  \return \f$ N^-(i) \f$.
 *  
 *  Если \f$ |Dom(N)| \le i \f$, то генерируется исключение std::out_of_range.
 */

/*! \fn size_t pm::utils::Numeration::find(const T & el) const
 *  \brief Вернуть образ объекта, равного \p el.
 *  
 *  \return \f$ N(el) \f$.
 *  \pre \f$ el \in Dom(N) \f$
 */

/*! \fn bool pm::utils::Numeration::has(const T & el) const
 *  \brief Вернуть `true` <=> область определения содержит значение, \ref GNSComparability "равное" \p el.
 */

/*! \fn size_t pm::utils::Numeration::size() const
 *  \brief Вернуть размер области определения.
 *  
 *  \return \f$ |Dom(N)| \f$.
 */

/*! \fn Iterator pm::utils::Numeration::begin() const
 *  \brief Вернуть итератор, указывающий на начало перебора (в том числе в \ref GNSRangeBasedFor "цикле по коллекции").
 *  
 *  Возвращаемый итератор указывает на:
 *  - объект \f$ N^-(0) \f$, если \f$ Dom(N) \ne \emptyset \f$;
 *  - конец перебора, если \f$ Dom(N) = \emptyset \f$.
 */

/*! \fn Iterator pm::utils::Numeration::end() const
 *  \brief Вернуть итератор, указывающий на конец перебора (в том числе в \ref GNSRangeBasedFor "цикле по коллекции").
 */

/*! \class pm::utils::Numeration::Iterator
 *  \brief Итератор для перебора элементов \ref pm::utils::Numeration "нумерации" (в том числе в \ref GNSRangeBasedFor "цикле по коллекции").
 *  
 *  Корректно (как в stl) используемый итератор указывает либо на некоторый объект области определения нумерации, либо на конец перебора.
 *  
 *  Итератор перестаёт быть корректным, если объект, на который он указывает, удаляется из области определения нумерации.
 *  
 *  В остальных случаях (в том числе при добавлении объектов в область определения) корректность итераторов сохраняется.
 */

/*! \fn Iterator & pm::utils::Numeration::Iterator::operator ++()
 *  \brief Перейти к следующему элементу нумерации.
 *  
 *  Если до выполнения итератор указывал на объект \f$ N^-(i) \f$, то после выполнения будет указывать на:
 *  - \f$ N^-(i+1) \f$, если \f$ |Dom(N)| > i + 1 \f$
 *  - конец перебора, иначе.
 *  
 *  \return Этот итератор после выполнения метода.
 *  \pre Итератор указывает на какой-либо объект области определения нумерации.
 */

/*! \fn Iterator pm::utils::Numeration::Iterator::operator ++(int)
 *  \brief Перейти к следующему элементу нумерации.
 *  
 *  Если до выполнения итератор указывал на объект \f$ N^-(i) \f$, то после выполнения будет указывать на:
 *  - \f$ N^-(i+1) \f$, если \f$ |Dom(N)| > i + 1 \f$
 *  - конец перебора, иначе.
 *  
 *  \return Этот итератор до выполнения метода.
 *  \pre Итератор указывает на какой-либо объект области определения нумерации.
 */

/*! \fn Iterator & pm::utils::Numeration::Iterator::operator --()
 *  \brief Перейти к предыдущему элементу нумерации.
 *  
 *  Если до выполнения итератор указывал на объект \f$ N^-(i) \f$, то после выполнения будет указывать на \f$ N^-(i-1) \f$.
 *  
 *  Если до выполнения итератор указывал на конец перебора, то после выполнения будет указывать на объект области определения с наибольшим образом.
 *  
 *  \return Этот итератор после выполнения метода.
 *  \pre \f$ Dom(N) \ne \emptyset \f$.
 *  \pre Итератор указывает на конец перебора или на объект, образ которого отличен от `0`.
 */

/*! \fn Iterator pm::utils::Numeration::Iterator::operator --(int)
 *  \brief Перейти к предыдущему элементу нумерации.
 *  
 *  Если до выполнения итератор указывал на объект \f$ N^-(i) \f$, то после выполнения будет указывать на \f$ N^-(i-1) \f$.
 *  
 *  Если до выполнения итератор указывал на конец перебора, то после выполнения будет указывать на объект области определения с наибольшим образом.
 *  
 *  \return Этот итератор до выполнения метода.
 *  \pre \f$ Dom(N) \ne \emptyset \f$.
 *  \pre Итератор указывает на конец перебора или на объект, образ которого отличен от `0`.
 */

/*! \fn bool pm::utils::Numeration::Iterator::operator ==(const Iterator & i) const
 *  \brief Вернуть `true` <=> этот итератор указывает на тот же элемент нумерации, что и \p i.
 */

/*! \fn bool pm::utils::Numeration::Iterator::operator !=(const Iterator & i) const
 *  \brief Вернуть `true` <=> этот итератор указывает на элемент нумерации, отличный от того, на который указывает \p i.
 */

/*! \fn const T & pm::utils::Numeration::Iterator::operator *() const
 *  \brief Вернуть объект, на который указывает итератор.
 *  
 *  \pre Итератор указывает на какой-либо объект области определения нумерации.
 */

/*! \fn const T & pm::utils::Numeration::Iterator::operator *() const
 *  \brief Вернуть объект, на который указывает итератор.
 *  
 *  \pre Итератор указывает на какой-либо объект области определения нумерации.
 */
