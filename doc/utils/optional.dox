/*! \file include/pm/utils/optional.hpp
 *  \brief Содержит шаблонный класс опционала pm::utils::Optional.
 *  \ingroup ModuleUtils
 */

/*! \class pm::utils::Optional
 *  \brief Класс опционала.
 *  \ingroup ModuleUtils
 *  
 *  \pre Тип \p T уничтожаем.
 *  
 *  Понятие *опционала*, используемое в библиотеке, во многом совпадает с понятием опционала стандарта C++17 (std::optional), хотя и отличается в деталях интерфейса взаимодействия.
 *  
 *  Опционал *хранит* не более одного объекта заданного типа \p T - *типа опционала*.
 *  
 *  Опционал *непуст*, если в нём хранится объект, и *пуст* в противном случае.
 *  
 *  В числе прочих, над опционалом можно производить следующие операции:
 *  - *опустошение*: в результате он становится пустым, и если был непуст, то хранимый объект уничтожается;
 *  - *наполнение* объектом: в результате опционал становится непустым и хранящим этот объект, и если опционал был непуст до наполнения, то исходный хранящийся объект уничтожается.
 *  
 *  Особые свойства класса
 *  ==
 *  
 *  \ref GNSValidState "Стандартно-корректен".
 */

/*! \fn pm::utils::Optional::Optional()
 *  \brief Инициализировать пустой опционал.
 */

/*! \fn pm::utils::Optional::Optional(const Optional<T> & opt)
 *  \brief Инициализировать: пустой опционал, если \p opt пуст; опционал, наполненный копией объекта, хранящегося в \p opt, если \p opt непуст.
 *  
 *  \pre Тип \p T \ref GNSLifetime "копируем".
 */

/*! \fn pm::utils::Optional::Optional(Optional<T> && opt)
 *  \brief Инициализировать: пустой опционал, если \p opt пуст; опционал, наполненный перемещением объекта, хранящегося в \p opt, если \p opt непуст.
 *  
 *  \pre Тип \p T \ref GNSLifetime "перемещаем".
 */

/*! \fn Optional<T> & pm::utils::Optional::operator =(const Optional<T> & opt)
 *  \brief Опустошить опционал, если \p opt пуст. Наполнить опционал копией объекта, хранящегося в \p opt, если \p opt непуст.
 *  
 *  \pre Тип \p T \ref GNSLifetime "копируем".
 */

/*! \fn Optional<T> & pm::utils::Optional::operator =(Optional<T> && opt)
 *  \brief Опустошить опционал, если \p opt пуст. Наполнить опционал перемещением объекта, хранящегося в \p opt, если \p opt непуст.
 *  
 *  \pre Тип \p T \ref GNSLifetime "перемещаем".
 */

/*! \fn pm::utils::Optional::~Optional()
 *  \brief Стандартное значение.
 *  
 *  Если уничтожаемый опционал непуст, то уничтожается и хранимый объект.
 */

/*! \fn pm::utils::Optional::Optional(const T & value)
 *  \brief Инициализировать непустой опционал, хранящий копию объекта \p value.
 *  
 *  \pre Тип \p T \ref GNSLifetime "копируем".
 */

/*! \fn pm::utils::Optional::Optional(T && value)
 *  \brief Инициализировать непустой опционал, хранящий перемещение объекта \p value.
 *  
 *  \pre Тип \p T \ref GNSLifetime "перемещаем".
 */

/*! \fn Optional<T> & pm::utils::Optional::operator =(const T & value)
 *  \brief Наполнить опционал копией объекта \p value.
 *  
 *  \pre Тип \p T \ref GNSLifetime "копируем".
 */

/*! \fn Optional<T> & pm::utils::Optional::operator =(T && value)
 *  \brief Наполнить опционал перемещением объекта \p value.
 *  
 *  \pre Тип \p T \ref GNSLifetime "перемещаем".
 */

/*! \fn void pm::utils::Optional::set(Args && ... args)
 *  \brief Наполнить опционал объектом `T(std::forward<Args>(args) ...)`.
 *  
 *  \pre Тип \p T \ref GNSLifetime "инициализируем" от аргументов \p args.
 */

/*! \fn void pm::utils::Optional::unset()
 *  \brief Опустошить опционал.
 */

/*! \fn bool pm::utils::Optional::empty() const
 *  \brief Вернуть `true` <=> опционал пуст.
 */

/*! \fn bool pm::utils::Optional::nonempty() const
 *  \brief Вернуть `true` <=> опционал непуст.
 */

/*! \fn T & pm::utils::Optional::val()
 *  \brief Вернуть хранимый объект.
 *  
 *  \pre Опционал непуст.
 */

/*! \fn const T & pm::utils::Optional::val() const
 *  \brief Вернуть хранимый объект.
 *  
 *  \pre Опционал непуст.
 */
