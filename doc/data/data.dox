/*! \file include/pm/data/data.hpp
 *  \brief Содержит класс данных pm::data::Data.
 *  \ingroup ModuleData
 */

/*! \class pm::data::Data
 *  \brief Класс данных.
 *  \ingroup ModuleData
 *  
 *  
 *  *Данные* - это контейнер, *хранящий* не более одного объекта произвольного \ref DObjectModification "уничтожимого" типа.
 *  Наличие, тип и значение объекта могут произвольно изменяться при выполнении программы.
 *  
 *  Данные *пусты*, если не хранят ни одного объекта, и *непусты*, если хранят какой-либо объект.
 *  
 *  *Опциональным объектом* в документации этого класса называется объект в обычном понимании, а также специальный *пустой объект*, обозначающий отсутствие объекта в данных.
 *  Эта терминология используется для простоты и краткости:
 *  в данных d всегда хранится ровно один опциональный объект \<d\>.
 *  
 *  *Копия* пустого объекта - это пустой объект (по аналогии с \ref DObjectModification "копией" обычного объекта).
 *  
 *  В числе прочих, над данными d можно производить следующие операции:
 *  - *Вставка* опционального объекта o: после вставки данные d хранят опциональный объект o.
 *  - *Перенаполнение* опциональным объектом o:
 *   - если данные d непусты, то объект \<d\> \ref DObjectModification "уничтожается";
 *   - в данные d вставляется опциональный объект o.
 *  - *Опустошение*: перенаполнение пустым объектом.
 *  - *Обмен* с данными d': объект \<d\> вставляется в данные d', и одновременно с этим объект \<d'\> вставляется в данные d.
 *  
 *  Особые свойства класса
 *  ==
 *  
 *  \ref DValidState "Стандартно-корректен".
 *  
 *  Неявные методы
 *  ==
 *  
 *      ~Data()
 *  
 *  Уничтожить данные.
 *  
 *  Если данные непусты, то объект \<\ref DSelf "self"\> уничтожается.
 */

/*! \fn pm::data::Data::Data()
 *  \brief Инициализировать пустые данные.
 */

/*! \fn pm::data::Data::Data(const Data & d)
 *  \brief Инициализировать данные, хранящие новую копию опционального объекта \<\p d\>.
 *  
 *  \pre Если данные \p d непусты, то тип объекта \<\p d\> \ref DObjectModification "копируем".
 */

/*! \fn pm::data::Data::Data(Data && d)
 *  \brief Инициализировать данные, хранящие объект \<\p d\>.
 */

/*! \fn Data & pm::data::Data::operator =(const Data & d)
 *  \brief Перенаполнить данные \ref DSelf "self" новой копией опционального объекта \<\p d\>.
 *  
 *  \pre Если данные \p d непусты, то тип объекта \<\p d\> \ref DObjectModification "копируем".
 *  \return Self.
 */

/*! \fn Data & pm::data::Data::operator =(Data && d)
 *  \brief Вставить опциональный объект \<\p d\> в данные \ref DSelf "self".
 *  
 *  \return Self.
 */

/*! \fn void pm::data::Data::set(Args && ... args)
 *  \brief Перенаполнить данные новым объектом типа \p T, инициализированным от \p args \ref DPerfectForwarding "идеальной передачей".
 *  
 *  \pre Тип \p T \ref DObjectModification "инициализируем" от идеально переданных аргументов \p args и \ref DObjectModification "уничтожим".
 */

/*! \fn void pm::data::Data::swap(Data & d)
 *  \brief Обменять данные \ref DSelf "self" с данными \p d.
 */

/*! \fn void pm::data::Data::unset()
 *  \brief Опустошить данные.
 */

/*! \fn Data pm::data::Data::clone() const
 *  \brief Вернуть данные, хранящие новую копию опционального объекта \<\ref DSelf "self"\>.
 *  
 *  \pre Если данные self непусты, то тип объекта \<self\> \ref DObjectModification "копируем".
 */

/*! \fn bool pm::data::Data::empty() const
 *  \brief Вернуть `true` <=> данные пусты.
 */

/*! \fn bool pm::data::Data::nonempty() const
 *  \brief Вернуть `true` <=> данные непусты.
 */

/*! \fn T & pm::data::Data::val() const
 *  \brief Вернуть ссылку на объект \<\ref DSelf "self"\>.
 *  
 *  \pre Данные D непусты.
 *  \pre Тип объекта \<self\> - **в точности** \p T.
 */

/*! \fn Data pm::data::Data::make(Args && ... args)
 *  \brief Вернуть новые непустые данные, хранящие новый объект типа \p T, инициализированный от \p args \ref DPerfectForwarding "идеальной передачей".
 *  
 *  \pre Тип \p T \ref DObjectModification "инициализируем" от идеально переданных аргументов \p args и \ref DObjectModification "уничтожим".
 */
