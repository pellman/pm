/*! \file include/pm/utils/numeration.hpp
 *  \brief Содержит шаблонный класс \ref ConNumeration "нумерации" pm::utils::Numeration.
 *  
 *  \ingroup ModuleUtils
 */

/*! \class pm::utils::Numeration
 *  \brief Класс \ref ConNumeration "нумерации".
 *  
 *  \ingroup ModuleUtils
 *  
 *  \tparam Element Тип объектов области определения нумерации.
 *  \pre Тип \p Element <-сравним и уничтожаем.
 *  
 *  В описании методов \f$ N \f$ означает нумерацию до вызова метода, и \f$ N' \f$ - нумерацию после вызова.
 *  
 *  Особые свойства класса
 *  ==
 *  
 *  \ref ConBaseValidState "Нестандартно-корректен".
 *  
 *  \ref ConBaseStandardNotions "Совместим с циклом по коллекции":
 *  - перебираются элементы области определения по возрастанию их образов;
 *  - допускается перебор элементов в переменной `var`, тип которой не содержит ссылок (например, `Element var` при условии, что тип \p Element копируем через присваивание), или содержит lvalue-ссылку и квалификатор `const` (например, `const Element &`).
 *  
 *  Неявные методы
 *  ==
 *  
 *  Конструктор по умолчанию: `Numeration()`
 *  --
 *  
 *  Инициализировать нумерацию с пустой областью определения.
 *  
 *  Конструктор копирования: `Numeration(const Numeration & n)`
 *  --
 *  
 *  Инициализировать нумерацию `N`, совпадающую с \p n.
 *  
 *  В \f$ Dom(N) \f$ записываются копии объектов, содержащихся в \f$ Dom(n) \f$.
 *  
 *  \pre Тип \p Element копируем.
 *  
 *  Конструктор перемещения: `Numeration(Numeration && n)`
 *  --
 *  
 *  Инициализировать нумерацию `N`, совпадающую с \p n.
 *  
 *  Объекты, содержащиеся в \f$ Dom(n) \f$, перемещаются в \f$ Dom(N) \f$.
 *  
 *  \pre Тип \p Element перемещаем.
 *  
 *  Копирующее присваивание: `Numeration & operator =(const Numeration & n)`
 *  --
 *  
 *  Сделать нумерацию совпадающей с \p n.
 *  
 *  В \f$ Dom(N) \f$ записываются копии объектов, содержащихся в \f$ Dom(n) \f$.
 *  
 *  \pre Тип \p Element копируем.
 *  
 *  Перемещающее присваивание: `Numeration & operator =(Numeration && n)`
 *  --
 *  
 *  Сделать нумерацию совпадающей с \p n.
 *  
 *  Объекты, содержащиеся в \f$ Dom(n) \f$, перемещаются в \f$ Dom(N) \f$.
 *  
 *  \pre Тип \p Element перемещаем.
 *  
 *  Деструктор: `~Numeration()`
 *  --
 *  
 *  Стандартное значение.
 *  
 *  Все объекты, содержащиеся в \f$ Dom(n) \f$, уничтожаются.
 */

/*! \fn size_t pm::utils::Numeration::add(const Element & el)
 *  \brief Добавить копию объекта \p el в область определения.
 *  
 *  \return \f$ N'(el) \f$
 *  
 *  Если \f$ Dom(N) \f$ содержит объект, равный \p el, то \f$ N' \f$ совпадает с \f$ N \f$.
 *  
 *  Иначе
 *  - \f$ Dom(N') = Dom(N) \cup \{ el \} \f$;
 *  - \f$ N'(el) = |Dom(N)| \f$;
 *  - для всех объектов \f$ v \f$ множества \f$ Dom(N) \f$ верно: \f$ N'(v) = N(v) \f$.
 *  
 *  \pre Тип \p Element копируем.
 */

/*! \fn size_t pm::utils::Numeration::add(Element && el)
 *  \brief Добавить перемещение объекта \p el в область определения.
 *  
 *  \return \f$ N'(el) \f$
 *  
 *  Если \f$ Dom(N) \f$ содержит объект, равный \p el, то \f$ N' \f$ совпадает с \f$ N \f$.
 *  
 *  Иначе
 *  - \f$ Dom(N') = Dom(N) \cup \{ el \} \f$;
 *  - \f$ N'(el) = |Dom(N)| \f$;
 *  - для всех объектов \f$ v \f$ множества \f$ Dom(N) \f$ верно: \f$ N'(v) = N(v) \f$.
 *  
 *  \pre Тип \p Element перемещаем.
 */

/*! \fn void pm::utils::Numeration::clear()
 *  \brief Обнулить область определения.
 *  
 *  \f$ Dom(N') = \emptyset \f$.
 */

/*! \fn void pm::utils::Numeration::remove(const Element & el)
 *  \brief Удалить объект, равный \p el, из области определения.
 *  
 *  Если \f$ Dom(N) \f$ не содержит объектов, равных \p el, то \f$ N' \f$ совпадает с \f$ N \f$.
 *  
 *  Иначе
 *  - \f$ Dom(N') = Dom(N) \setminus \{ el \}\f$;
 *  - образы области определения \f$ N' \f$ не специфицированы (могут измениться произвольным образом).
 */

/*! \fn const Element & pm::utils::Numeration::element_at(size_t i) const
 *  \brief Вернуть прообраз числа \p i.
 *  
 *  \return \f$ N^-(i) \f$.
 *  \pre \f$ |Dom(N)| > i \f$
 */

/*! \fn bool pm::utils::Numeration::has(const Element & el) const
 *  \brief Вернуть `true` <=> область определения содержит значение, равное \p el.
 */

/*! \fn size_t pm::utils::Numeration::index_of(const Element & el) const
 *  \brief Вернуть образ объекта, равного \p el.
 *  
 *  \return \f$ N(el) \f$.
 *  \pre \f$ el \in Dom(N) \f$
 */

/*! \fn size_t pm::utils::Numeration::size() const
 *  \brief Вернуть размер области определения.
 *  
 *  \return \f$ |Dom(N)| \f$.
 */

/*! \fn Iterator pm::utils::Numeration::begin() const
 *  \brief Вернуть итератор, указывающий на начало перебора (в том числе в цикле по коллекции).
 *  
 *  Если область определения нумерации пуста, то возвращаемый итератор указывает на конец перебора.
 *  Иначе возвращаемый итератор указывает на элемент с образом `0`.
 */

/*! \fn Iterator pm::utils::Numeration::end() const
 *  \brief Вернуть итератор на конец перебора (в том числе в цикле по коллекции).
 */

/*! \class pm::utils::Numeration::Iterator
 *  \brief Итератор для перебора элементов \ref ConNumeration "нумерации" (в том числе в \ref ConBaseStandardNotions "цикле по коллекции").
 *  
 *  Корректно (как в stl) используемый итератор указывает либо на некоторый объект области определения нумерации, либо на конец перебора.
 *  
 *  Корректность итератора сохранятеся при вызове любых методов нумерации, кроме методов, удаляющих объект, на который указывает итератор, из области определения нумерации.
 */

/*! \fn Iterator & pm::utils::Numeration::Iterator::operator ++()
 *  \brief Перейти к следующему элементу нумерации.
 *  
 *  \return Этот итератор после перехода.
 *  
 *  Если итератор указывает на объект области определения с наибольшим образом, то итератор перенаправляется на конец перебора.
 *  Иначе итератор перенаправляется на объект с образом `i+1`, где `i` - образ текущего объекта.
 *  
 *  \pre Итератор указывает на какой-либо объект области определения нумерации.
 */

/*! \fn Iterator pm::utils::Numeration::Iterator::operator ++(int)
 *  \brief Перейти к следующему элементу нумерации.
 *  
 *  \return Значение этого итератора до перехода.
 *  
 *  Если итератор указывает на объект области определения с наибольшим образом, то итератор перенаправляется на конец перебора.
 *  Иначе итератор перенаправляется на объект с образом `i+1`, где `i` - образ текущего объекта.
 *  
 *  \pre Итератор указывает на какой-либо объект области определения нумерации.
 */

/*! \fn Iterator & pm::utils::Numeration::Iterator::operator --()
 *  \brief Перейти к предыдущему элементу нумерации.
 *  
 *  \return Этот итератор после перехода.
 *  
 *  Если итератор указывает на конец перебора, то итератор перенаправляется на объект области определения нумерации с наибольшим образом.
 *  Иначе итератор перенаправляется на объект с образом `i-1`, где `i` - образ текущего объекта.
 *  
 *  \pre Область определения нумерации непуста.
 *  \pre Итератор указывает на конец перебора или на объект, образ которого отличен от `0`.
 */

/*! \fn Iterator pm::utils::Numeration::Iterator::operator --(int)
 *  \brief Перейти к предыдущему элементу нумерации.
 *  
 *  \return Значение этого итератора до перехода.
 *  
 *  Если итератор указывает на конец перебора, то итератор перенаправляется на объект области определения нумерации с наибольшим образом.
 *  Иначе итератор перенаправляется на объект с образом `i-1`, где `i` - образ текущего объекта.
 *  
 *  \pre Область определения нумерации непуста.
 *  \pre Итератор указывает на конец перебора или на объект, образ которого отличен от `0`.
 */

/*! \fn bool pm::utils::Numeration::Iterator::operator ==(const Iterator & i) const
 *  \brief Вернуть `true` <=> этот итератор указывает на тот же элемент, что и \p i.
 */

/*! \fn bool pm::utils::Numeration::Iterator::operator !=(const Iterator & i) const
 *  \brief Вернуть `true` <=> этот итератор указывает на элемент, отличный от того, на который указывает \p i.
 */

/*! \fn const Element & pm::utils::Numeration::Iterator::operator *() const
 *  \brief Вернуть объект, на который указывает итератор.
 *  
 *  \pre Итератор указывает на какой-либо объект области определения нумерации.
 */

/*! \fn const Element & pm::utils::Numeration::Iterator::operator *() const
 *  \brief Вернуть объект, на который указывает итератор.
 *  
 *  \pre Итератор указывает на какой-либо объект области определения нумерации.
 */
