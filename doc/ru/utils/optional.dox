/*! \file include/pm/utils/optional.hpp
 *  \brief Содержит шаблонный класс \ref ConOptional "опционала" pm::utils::Optional.
 *  
 *  \ingroup ModuleUtils
 */

/*! \class pm::utils::Optional
 *  \brief Класс \ref ConOptional "опционала".
 *  
 *  \ingroup ModuleUtils
 *  
 *  \tparam StoredType Тип хранимых объектов.
 *  \pre Тип \p StoredType уничтожаем.
 *  
 *  Особые свойства класса
 *  ==
 *  
 *  \ref ConBaseValidState "Стандартно-корректен".
 */

/*! \fn pm::utils::Optional::Optional()
 *  \brief Инициализировать пустой опционал.
 */

/*! \fn pm::utils::Optional::Optional(const Optional<StoredType> & opt)
 *  \brief Инициализировать пустой опционал, если \p opt пуст, или опционал, наполненный копией объекта, хранящегося в \p opt, если \p opt непуст.
 *  
 *  \pre Тип \p StoredType копируем.
 */

/*! \fn pm::utils::Optional::Optional(Optional<StoredType> && opt)
 *  \brief Инициализировать пустой опционал, если \p opt пуст, или опционал, наполненный перемещением объекта, хранящегося в \p opt, если \p opt непуст.
 *  
 *  \pre Тип \p StoredType перемещаем.
 */

/*! \fn Optional<StoredType> & pm::utils::Optional::operator =(const Optional<StoredType> & opt)
 *  \brief Опустошить опционал, если \p opt пуст, или наполнить его копией объекта, хранящегося в \p opt, если \p opt непуст.
 *  
 *  \pre Тип \p StoredType копируем.
 */

/*! \fn Optional<StoredType> & pm::utils::Optional::operator =(Optional<StoredType> && opt)
 *  \brief Опустошить опционал, если \p opt пуст, или наполнить его перемещением объекта, хранящегося в \p opt, если \p opt непуст.
 *  
 *  \pre Тип \p StoredType перемещаем.
 */

/*! \fn pm::utils::Optional::~Optional()
 *  \brief Стандартное значение.
 *  
 *  Если уничтожаемый опционал непуст, то уничтожается и хранимое значение.
 */

/*! \fn pm::utils::Optional::Optional(const StoredType & value)
 *  \brief Инициализировать непустой опционал, хранящий копию объекта \p value.
 *  
 *  \pre Тип \p StoredType копируем.
 */

/*! \fn pm::utils::Optional::Optional(StoredType && value)
 *  \brief Инициализировать непустой опционал, хранящий перемещение объекта \p value.
 *  
 *  \pre Тип \p StoredType перемещаем.
 */

/*! \fn Optional<StoredType> & pm::utils::Optional::operator =(const StoredType & value)
 *  \brief Наполнить опционал копией объекта \p value.
 *  
 *  \pre Тип \p StoredType копируем.
 */

/*! \fn Optional<StoredType> & pm::utils::Optional::operator =(StoredType && value)
 *  \brief Наполнить опционал перемещением объекта \p value.
 *  
 *  \pre Тип \p StoredType перемещаем.
 */

/*! \fn void pm::utils::Optional::set(Args && ... args)
 *  \brief Наполнить опционал объектом `StoredValue(std::forward<Args>(args) ...)`.
 *  
 *  \pre Тип \p StoredType инициализируем от аргументов \p args.
 */

/*! \fn void pm::utils::Optional::unset()
 *  \brief Опустошить опционал.
 */

/*! \fn bool pm::utils::Optional::empty() const
 *  \brief Вернуть `true` <=> опционал пуст.
 */

/*! \fn bool pm::utils::Optional::nonempty() const
 *  \brief Вернуть `true` <=> опционал непуст.
 */

/*! \fn StoredType & pm::utils::Optional::val()
 *  \brief Вернуть хранимый объект.
 *  
 *  \pre Опционал непуст.
 */

/*! \fn const StoredType & pm::utils::Optional::val() const
 *  \brief Вернуть хранимый объект.
 *  
 *  \pre Опционал непуст.
 */
