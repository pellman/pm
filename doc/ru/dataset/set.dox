/*! \file include/pm/dataset/set.hpp
 *  \brief Содержит класс \ref ConDataset "совокупности данных" pm::dataset::Set.
 *  
 *  \ingroup ModuleDataset
 */

/*! \class pm::dataset::Set
 *  \brief Класс \ref ConDataset "совокупности данных".
 *  
 *  \ingroup ModuleDataset
 *  
 *  *Эта совокупность* - это объект, документируемый метод которой вызывается.
 *  
 *  *Метод с потерей связи* - это метод, при вызове которого исчезает связь всех указателей совокупности с объектами до вызова.
 *  Если эта связь не восстанавливается (согласно документации) по завершении вызова, то инициируется сборка мусора для объекта, связь с которым разоравана.
 *  
 *  *Уничтожающий метод* - это метод, при вызове которого текущие (непустые) данные, связанные со всеми указателями совокупности, в обязательном порядке уничтожаются в рамках сборки мусора.
 *  
 *  Особые свойства класса
 *  ==
 *  
 *  \ref ConBaseValidState "Нестандартно-корректен".
 *  
 *  Неявные методы
 *  ==
 *  
 *  Конструктор по умолчанию: `Set()`
 *  
 *  Инициализировать совокупность по умолчанию (все данные - пустые в новых блоках).
 *  
 *  Конструктор копирования: `Set(const Set & c)`
 *  --
 *  
 *  Инициализировать совокупность, все указатели которой направлены на данные соответствующих указателей совокупности \p c.
 *  
 *  Конструктор перемещения: `Set(Set && c)`
 *  --
 *  
 *  Инициализировать совокупность, все указатели которой направлены на данные соответствующих указателей совокупности \p c.
 *  
 *  Копирующее присваивание: `Set & operator =(const Set & c)`
 *  --
 *  
 *  Перенаправить все указатели этой совокупности на данные соответствующих указателей совокупности \p c.
 *  
 *  Перемещающее присваивание: `Set & operator =(Set && c)`
 *  --
 *  
 *  Перенаправить все указатели этой совокупности на данные соответствующих указателей совокупности \p c.
 *  
 *  Деструктор: `~Set()`
 *  --
 *  
 *  Стандартное значение.
 *  При уничтожении указателей этой совокупности производится сборка мусора.
 */

/*! \fn void pm::dataset::Set::detach()
 *  \brief Открепить все указатели этой совокупности.
 *  
 *  Метод с потерей связи.
 *  
 *  \pre Для всех индексов `i` верно: если данные `i`-го указателя этой совокупности непусты, то тип этих данных копируем.
 */

/*! \fn void pm::dataset::Set::detach_receive(const Set & set)
 *  \brief Открепить все указатели этой совокупности и затем перезаписать их соответствующими указателями совокупности \p set, но без фактического копирования данных при откреплении.
 *  
 *  Метод с потерей связи.
 *  
 *  \pre Для всех индексов `i` верно: если данные `i`-го указателя совокупности \p set непусты, то тип этих данных копируем.
 */

/*! \fn void pm::dataset::Set::detach_unset()
 *  \brief Открепить все указатели этой совокупности и затем сбросить их, но без фактического копирования данных при откреплении.
 *  
 *  Метод с потерей связи.
 */

/*! \fn void pm::dataset::Set::receive(const Set & set) const
 *  \brief Перезаписать все указатели этой совокупности соответствующими указателями совокупности \p set.
 *  
 *  Уничтожающий метод.
 *  
 *  \pre Для всех индексов `i` верно: если данные `i`-го указателя совокупности \p set непусты, то тип этих данных копируем.
 */

/*! \fn void pm::dataset::Set::swap(const Set & set) const
 *  \brief Обменять данные всех указателей этой совокупности и соответствующих указателей совокупности \p set.
 */

/*! \fn void pm::dataset::Set::unset() const
 *  \brief Сбросить все указатели этой совокупности.
 *  
 *  Уничтожающий метод.
 */

/*! \fn Set pm::dataset::Set::clone() const
 *  \brief Вернуть совокупность, все указатели которой являются клонами соответствующих указателей этой совокупности.
 *  
 *  \pre Для всех индексов `i` верно: если данные `i`-го указателя этой совокупности непусты, то тип этих данных копируем.
 */

/*! \fn void pm::dataset::Set::send(const Set & set) const
 *  \brief Перезаписать все указатели совокупности \p set соответствующими указателями этой совокупности.
 *  
 *  При вызове этого метода текущие (непустые) данные, связанные со всеми указателями совокупности \p set, в обязательном порядке уничтожаются в рамках сборки мусора.
 *  
 *  \pre Для всех индексов `i` верно: если данные `i`-го указателя этой совокупности непусты, то тип этих данных копируем.
 */

/*! \fn const type_abuse::DPtr & pm::dataset::Set::data(size_t i) const
 *  \brief Вернуть i-й указатель этой совокупности.
 */

/*! \fn StoredType & pm::dataset::Set::val(size_t i) const
 *  \brief Вернуть данные i-го указателя этой совокупности.
 *  
 *  \pre Данные i-го указателя этой совокупности непусты и имеют тип \p StoredType.
 */
