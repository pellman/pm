/*! \file include/pm/dataset/function.hpp
 *  \brief Содержит класс \ref ConDataset "функции над совокупностью данных" pm::dataset::Function.
 *  
 *  \ingroup ModuleDataset
 */

/*! \class pm::dataset::Function
 *  \brief Класс \ref ConDataset "функции над совокупностью данных".
 *  
 *  \ingroup ModuleDataset
 *  
 *  Объект этого класса является \ref ConBaseDynamicWrapper "динамической обёрткой" над функцией над совокупностью данных в широком смысле.
 *  
 *  *Подфункция* - это функция над совокупностью данных в широком смысле, на которое направлена обёртка.
 *  
 *  В документации готовых функций над совокупностью данных динамическая обёртка отождествляется со своей подфункцией.
 *  
 *  *Это выражение* - это обёртка, документируемый метод которой вызывается.
 *  
 *  Особые свойства класса
 *  ==
 *  
 *  \ref ConBaseValidState "Нестандартно-корректен".
 *  
 *  Неявные методы
 *  ==
 *  
 *  Конструктор копирования: `Function(const Function & f)`
 *  --
 *  
 *  Инициализировать функцию, направленную на подфункцию функции \p f.
 *  
 *  Конструктор перемещения: `Function(Function && f)`
 *  --
 *  
 *  Инициализировать функцию, направленную на подфункцию функции \p f.
 *  
 *  Копирующее присваивание: `Function & operator =(const Function & f)`
 *  --
 *  
 *  Перенаправить функцию на подфункцию функции \p f.
 *  
 *  Перемещающее присваивание: `Function & operator =(Function && f)`
 *  --
 *  
 *  Перенаправить функцию на подфункцию функции \p f.
 *  
 *  Деструктор: `~Function()`
 *  --
 *  
 *  Стандартное значение.
 */

/*! \fn pm::dataset::Function::Function() = default
 *  \brief Инициализировать тривиальную функцию.
 */

/*! \fn pm::dataset::Function::Function(FunctionInterface * ptr)
 *  \brief Инициализировать функцию, направленную на функцию в широком смысле, располагающуюся по адресу \p ptr (если `ptr == nullptr`, то на тривиальную функцию).
 *  
 *  \pre Если `ptr != nullptr`, то указатель \p ptr разыменовываем, и объект, располагающийся по адресу \p ptr, корректно уничтожается вызовом деструктора разыменования.
 *  \pre Если `ptr != nullptr`, то объект, располагающийся по адресу \p ptr, разрешено уничтожать только в рамках сборки мусора \ref ConTrickyPointers "стабильных указателей" согласно документации.
 */

/*! \fn pm::dataset::Function::Function(const type_abuse::SPtr<FunctionInterface> & ptr)
 *  \brief Инициализировать функцию, направленную на объект указателя \p ptr.
 */

/*! \fn pm::dataset::Function::Function(type_abuse::SPtr<FunctionInterface> && ptr)
 *  \brief Инициализировать функцию, направленную на объект указателя \p ptr.
 */

/*! \fn void pm::dataset::Function::apply(const Set & ds) const
 *  \brief Метод применения к совокупности данных. Применить подфункцию к \p ds.
 */
