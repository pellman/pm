/*! \page ConPredefinedGrammarActions Готовые грамматические действия
 * 
 * Здесь приводится список всех \ref ConGrammar "готовых грамматических действий".
 * 
 * Успех
 * --
 * 
 * Выполнение метода полного разбора возвратного потока `s` над грамматикой `g` в контексте `c` этим выражением устроено так:
 * - Немедленно возвращается успех.
 * 
 * Неуспех
 * --
 * 
 * Выполнение метода полного разбора возвратного потока `s` над грамматикой `g` в контексте `c` этим выражением устроено так:
 * - Немедленно возвращается неуспех.
 * 
 * Перенаправление на индекс i
 * --
 * 
 * Выполнение метода полного разбора возвратного потока `s` над грамматикой `g` в контексте `c` этим выражением устроено так:
 * - Запускается метод полного разбора потока `s` над грамматикой `g` в контексте `c` i-м действием грамматики `g`.
 * - Возвращается итог разбора i-м действием.
 * 
 * Перенаправление на индекс i с функцией отката `f`
 * --
 * 
 * `f` - это функция над совокупностью данных.
 * 
 * Выполнение метода полного разбора возвратного потока `s` над грамматикой `g` в контексте `c` этим выражением устроено так:
 * - Запускается метод полного разбора потока `s` над грамматикой `g` в контексте `c` i-м действием грамматики `g`.
 * - Если разбор i-м действием окончился неуспехом и подконтекст данных контекста `c` активен, то к совокупности данных контекста `c` применяется функция `f`.
 * - Возвращается итог разбора i-м действием.
 * 
 * Регулярное выражение r
 * --
 * 
 * Выполнение метода полного разбора возвратного потока `s` над грамматикой `g` в контексте `c` этим выражением устроено так:
 * - Если грамматика `g` содержит пробельное регулярное выражение, то раз за разом, пока не будет получен неуспех, запускается разбор потока `s` этим выражением.
 * - Запускается разбор потока `s` выражением `r`.
 * - Если строковый подконтекст контекста `c` активен и разбор выражением `r` успешен, то к строке контекста `c` добавляются все строки, принятые запущенными разборами, в порядке принятия; иначе строка контекста `c` не изменяется.
 * - Данные совокупности контекста `c` не изменяются.
 * 
 * Регулярное выражение r с индексом данных i
 * --
 * 
 * Выполнение метода полного разбора возвратного потока `s` над грамматикой `g` в контексте `c` этим выражением устроено так:
 * - Если грамматика `g` содержит пробельное регулярное выражение, то раз за разом, пока не будет получен неуспех, запускается разбор потока `s` этим выражением.
 * - Запускается разбор потока `s` выражением `r`.
 * - Если строковый подконтекст контекста `c` активен и разбор выражением `r` успешен, то к строке контекста `c` добавляются все строки, принятые запущенными разборами, в порядке принятия; иначе строка контекста `c` не изменяется.
 * - Если подконтекст данных контекста `c` активен и разбор выражением `r` успешен, то i-е данные совокупности контекста `c` изменяются согласно активному изменению данных выражением `r`; иначе данные совокупности контекста `c` не изменяются.
 * 
 * Функция `f`
 * --
 * 
 * `f` - это функция над совокупностью данных.
 * 
 * Выполнение метода полного разбора возвратного потока `s` над грамматикой `g` в контексте `c` этим выражением устроено так:
 * - Если подконтекст данных контекста `c` активен, то к совокупности данных контекста `c` применяется \ref ConDataset "функция над совокупностью данных" `f`.
 * - Возвращается успех.
 * 
 * Альтернатива над последовательностью индексов (i1, ..., ik)
 * --
 * 
 * Выполнение метода полного разбора возвратного потока `s` над грамматикой `g` в контексте `c` этим выражением устроено так:
 * - Последовательно - до первого успеха или до получения всех неуспехов - производятся вызовы разбора потока `s` над грамматикой `g` в контексте `c` (*подвызовы*)
 *  - i1-го действия грамматики `g`,
 *  - i2-го действия грамматики `g`,
 *  - ...
 *  - ik-го действия грамматики `g`.
 * - Возвращается успех <=> был получен успешный подвызов, и неуспех, если все подвызовы оказались неуспешными.
 * 
 * Правило над последовательностью индексов (i1, ..., ik)
 * --
 * 
 * Выполнение метода полного разбора возвратного потока `s` над грамматикой `g` в контексте `c` этим выражением устроено так:
 * - Строка контекста `c` сохраняется и заменяется на пустую.
 * - Значение флага активности строки контекста `c` сохраняется, и этот флаг поднимается.
 * - Последовательно - до первого неуспеха или до получения всех успехов - производятся вызовы разбора потока `s` над грамматикой `g` в (изменённом) контексте `c` (*подвызовы*)
 *  - i1-го действия грамматики `g`,
 *  - i2-го действия грамматики `g`,
 *  - ...
 *  - ik-го действия грамматики `g`.
 * - Восстанавливается сохранённое значение флага активности строки контекста `c`.
 * - Если строковый подконтекст контекста `c` активен и все подвызовы оказались успешными, то строка контекста `c` заменяется на сохранённую строку, к которой добавлены строки, принятые подвызовами, в порядке принятия.
 * - Если строковый подконтекст контекста `c` неактивен или был получен неуспешный подвызов, то сохранённая строка контекста `c` восстанавливается без изменений.
 * - Если был получен неуспешный подвызов, то суммарная строка, прочитанная подвызовами, возвращается в поток `s`.
 * - Возвращается успех <=> если все подвызовы оказались успешными.
 * 
 * Опционал над индексом i
 * --
 * 
 * Выполнение метода полного разбора возвратного потока `s` над грамматикой `g` в контексте `c` этим выражением устроено так:
 * - Вызывается метод полного разбора потока `s` над грамматикой `g` в контексте `c` i-м действием грамматики `g`.
 * - Возвращается успех.
 * 
 * Звезда Клини над индексом i
 * --
 * 
 * Выполнение метода полного разбора возвратного потока `s` над грамматикой `g` в контексте `c` этим выражением устроено так:
 * - Раз за разом до первого неуспеха вызывается метод полного разбора потока `s` над грамматикой `g` в контексте `c` i-м действием грамматики `g`.
 * - Возвращается успех.
 */
