/*! \page ConGrammar Грамматика
 * 
 * Грамматики - это довольно известное понятие, так что описание того, что это такое в целом, зачем применяется и каким бывает в других местах, здесь не приводится.
 * Здесь обсуждается то, как устроена вариация грамматик, реализованная в \ref index "этой библиотеке".
 * 
 * Абстракная понятийная семантическая база
 * ==
 * 
 * Разбор потока
 * --
 * 
 * Понятие *процедуры разбора возвратного потока* вводится в контексте \ref ConRegexp "регулярных выражений" и переносится на грамматики дословно без изменений.
 * 
 * Интерфейс грамматик
 * --
 * 
 * *Интерфейс грамматики* включает в себя:
 * - \ref ConRegexp "интерфейс разбора регулярного выражения", то есть все методы разбора и метод полного разбора, присущие регулярным выражением (методы *регулярного разбора*);
 * - *интерфейс грамматического разбора*, методы которого (*методы грамматического разбора* и *метод полного грамматического разбора*) отличаются от методов регулярного разбора только тем, что
 *  - метод полного разбора невиртуален (грамматика в текущей реализации - намного менее "гибкое" понятие, чем регулярное выражение);
 *  - вместо регулярного контекста данных используется другая структура данных - грамматический контекст разбора.
 * Устройство грамматического контекста разбора описывается далее в одноимённом разделе.
 * Отсутствие второго аргумента в вызове метода грамматического разбора означает, что при разборе будет использоваться особый грамматический контекст по умолчанию, согласно которому никакая полезная информация не извлекается.
 * 
 * Таким образом, грамматику всегда можно использовать как \ref ConRegexp "регулярное выражение в широком смысле", но и не только так.
 * 
 * Грамматический контекст разбора
 * --
 * 
 * В *грамматическом контексте разбора* с учётом вложенности полей содержатся следующие \ref ConTrickyPointers "хитрые указатели":
 * - стабильный указатель на строку;
 * - стабильный указатель на флаг активности строки;
 * - бесконечное число указателей на данные, образующих \ref ConDataset "совокупность данных";
 * - стабильный указатель на флаг активности данных.
 * Данные, хранящиеся в этих указателях, называются также *данными контекста* и данными, *содержащимися в контексте*.
 * 
 * Указатель на строку и на флаг активности строки образуют *строковый подконтекст*, полностью идентичный строковому подконтексту регулярного контекста разбора.
 * Совокупность данных и указатель на флаг активности данных образуют *подконтекст грамматических данных*.
 * 
 * Подконтекст *активен*, если его флаг активности поднят, и *неактивен*, если флаг активности опущен.
 * *Активировать подконтекст* - это поднять флаг активности подконтекста.
 * *Деактивировать подконтекст* - это опустить флаг активности подконтекста.
 * 
 * При работе с грамматическим контекстом следует иметь в виду, что:
 * - при копировании контекста разделяется владение данными, то есть оба контекста начинают указывать на одни и те же данные;
 * - указатели контекста можно явно перенаправлять на компоненты других контекстов и блоки указателей подходящих типов, не содержащихся в контекстах;
 * - данные контекста можно обменивать с данными других контекстов и указателей подходящих типов, не содержащихся в контекстах;
 * - перенаправление указателей контекста на новые динамически созданные данные производится явно при помощи соответствующих операций над хитрыми указателями, подконтекстами и самим контекстом.
 * 
 * Согласно устройству указателей на данные, каждые данные совокупности могут быть пустыми, либо непустыми и иметь произвольный (уничтожаемый) тип, и пустота, тип и значение данных могут произвольно изменяться при выполнении программы.
 * 
 * Компоненты *грамматического контекста по умолчанию*, а также компоненты любого грамматического контекста и/или его составных частей инициализируются (по умолчанию) следующим образом:
 * - указатель на флаг активности: новым опущенным флагом;
 * - указатель на строку: новой пустой строкой;
 * - указатель на совокупность данных: совокупностью по умолчанию (каждый указатель связан с новыми пустыми данными, связанными только с этим указателем).
 * 
 * Устройство грамматики
 * --
 * 
 * *Грамматика* содержит в себе конечную совокупность *грамматических действий*, индексированных неотрицательными целыми числами, среди которых есть одно *главное* действие.
 * Кроме того, грамматика
 * - может содержать, а может и не содержать \ref ConRegexp "безопасное" *пробельное регулярное выражение*;
 * - содержит *индекс главных данных* совокупности контекста, используемый при задействовании интерфейса регулярного разбора.
 * 
 * *Интерфейс грамматического действия* включает в себя единственный метод:
 * виртуальный *метод полного разбора* возвратного потока `s` *на грамматике* `g` в (грамматическом) контексте `c`.
 * Вызовом этого метода запускается процедура разбора потока, и по завершении возвращается итог разбора.
 * Как правило, этот метод вызывается с грамматикой `g`, в которой содержится грамматическое действие, вызвавшее этот метод, и при разборе потока в числе прочего могут вызываться методы полного разбора действий, содержащихся в `g`.
 * Принцип работы грамматического действия полностью определяется тем, как перегружен его метод полного разбора.
 * 
 * *Метод полного грамматического разбора* возвратного потока `s` в (грамматическом) контексте `c` грамматикой `g` устроен так:
 * - вызвать метод полного разбора потока `s` на грамматике `g` в контексте `c` для главного действия грамматики `g`;
 * - вернуть итог выполненного вызова.
 * 
 * *Метод полного регулярного разбора* возвратного потока `s` в (регулярном) контексте `c` устроен так:
 * - создать новый грамматический контекст `d` следующего вида:
 *  - его указатели на строку, флаг активности строки и флаг активности данных направлены на соответствующие данные контекста `c`;
 *  - указатель на данные его совокупности по индексу, равному индексу главных данных, направлены на новую копию данных контекста `c`, если подконтекст данных контекста `c` активен, или на новые пустые данные, если подконтекст данных контекста `c` неактивен;
 *  - все остальные указатели на данные его совокупности инициализированы по умолчанию;
 * - вызвать метод полного грамматического разбора потока `s` в контексте `d`;
 * - вернуть результат выполненного вызова.
 * 
 * *По умолчанию* грамматика инициализируется
 * - одним (главным) грамматическим действием "неуспех";
 * - отсутствующим пробельным регулярным выражением;
 * - индексом главных данных `0`.
 * 
 * Конкретная понятийная семантическая база
 * ==
 * 
 * \ref index "Этой библиотекой" предоставляется интерфейс создания грамматических действий, производящих разбор "естественно", "предсказуемо" и "разумно".
 * Эти действия для ясности называются *готовыми грамматическими действиями*.
 * Выполнение метода полного разбора готовым грамматическим действием удовлетворяет всем свойствам \ref ConRegexp "безопасных регулярных выражений" с заменой "регулярных данных контекста" на "данные совокупности контекста", кроме одной поправки:
 * если подконтекст данных активен и разбор завершился неуспехом, то данные совокупности контекста могут измениться.
 * 
 * В связи с особенностями взаимосвязи разных типов методов полного разбора также гарантируется следующее:
 * - выполнение метода полного грамматического разбора потока грамматикой, содержащей только готовые грамматические действия, удовлетворяет тем же свойствам, что и выполнение метода полного разбора потока готовым грамматическим действием;
 * - выполнение метода полного регулярного разбора потока грамматикой, содержащей только готовые грамматические действия, удовлетворяет всем свойствам безопасных регулярных выражений.
 * 
 * Список всех готовых грамматических действий приведён \ref ConPredefinedGrammarActions "здесь".
 * 
 * Понятийная синтаксическая база
 * ==
 * 
 * *Определение грамматики* состоит из
 * - совокупности *определений грамматических действий*, некоторым из которых присвоены *имена*:
 *  - каждому определению присвоено не более одного имени;
 *  - каждое имя присвоено не более чем одному определению;
 * - (опционально) имени главного действия;
 * - (опционально) имени главных данных;
 * - (опционально) пробельного регулярного выражения.
 * 
 * В определении грамматики содержится *метод интерпретации*, позволяющий по определению `sg`, чей метод вызван, получить соответствующую ему грамматику `g`.
 * По завершении вызова метода интерпретации, в числе прочего, определены:
 * - Отображение \f$ \varphi_a \f$ определений грамматики `sg` в индексы действий грамматики `g`:
 *  - Различные (как объекты) определения отображаются в различные индексы.
 * - Отображение \f$ \varphi_n \f$ имён, присвоенных определениям грамматики `sg`, в индексы действий грамматики `g`:
 *  - \f$ \varphi_n(name) = \varphi_a(def) \f$, где \f$ name \f$ - имя определения \f$ def \f$.
 * - Отображение \f$ \varphi_d \f$ имён данных (имён данных, содержащихся в определениях, и имени главных данных) в индексы совокупности данных контекста, с которым будет работать грамматика `g`:
 *  - Неравные имена отображаются в различные индексы.
 *  - Равные имена отображаются в один индекс.
 * 
 * В грамматике `g` содержатся действия, соответствующие всем определениям действий, содержащимся в `sg`.
 * Пробельное регулярное выражение (или его отсутствие) напрямую переносится из `sg` в `g`.
 * Если в определении `sg` содержится имя главного действия \f$ name \f$, равное имени какого-либо из определений действий, то главным действием грамматики `g` объявляется действие \f$ \varphi_n(name) \f$, а иначе - действие "неуспех".
 * Если в определении `sg` содержится имя главных данных \f$ dataname \f$, то главными данными грамматики `g` объявляются данные с индексом \f$ \varphi_d(dataname) \f$, а иначе - данные с индексом `0`.
 * 
 * Список всех *готовых определений*: определений готовых грамматических действий, интерфейс создания которых предоставляется \ref index "этой библиотекой" - приведён \ref ConPredefinedGrammarDefinitions "здесь".
 * 
 * Реализация и её документация
 * --
 * 
 * Грамматика - это объект класса pm::grammar::Grammar.
 * 
 * Грамматический контекст разбора - это объект класса pm::grammar::Context.
 * 
 * Интерфейс грамматического действия предоставляется классом pm::grammar::ActionInterface.
 * Грамматическое действие *в широком смысле* - это объект любого класса, наследующего интерфейс грамматического действия.
 * 
 * Грамматическое действие - это объект класса pm::grammar::Action, наследующего интерфейс грамматического действия.
 * 
 * Определение грамматики - это объект класса pm::grammar::syntax::Grammar.
 * 
 * Определение грамматического действия - это объект класса pm::grammar::syntax::Action.
 * 
 * Интерфейс создания готовых грамматических действий подключается файлом pm/grammar/actions.hpp
 * 
 * Интерфейс создания готовых определений грамматических действий разбит на три части:
 * - Базовый интерфейс. Содержит функции, возвращающие все готовые определения грамматических действий. Подключается файлом pm/grammar/syntax/actions/base.hpp
 * - Операторный интерфейс. Содержит операторы, позволяющие создавать готовые определения грамматических действий более наглядно. Подключается файлом pm/grammar/syntax/actions/operators.hpp
 * - Ленивый интерфейс. Содержит операторы, позволяющие писать меньше букв по сравнению с операторным интерфейсом: трактующий строку как определение имени, равного этой строке, регулярное выражение как определение регулярного выражения и определение функции над совокупностью данных как определение грамматического действия "определение функции над совокупностью данных". Подключается файлом pm/grammar/syntax/actions/lazy.hpp
 * 
 * Интерфейс создания готовых определений грамматических действий целиком подключается файлом pm/grammar/syntax/actions.hpp
 * 
 * Все классы и функции синтаксической части целиком подключаются файлом pm/grammar/syntax.hpp
 */
