/*! \mainpage Библиотека pm
 * 
 * Это документация к библиотеке pm версии 2.0.
 * 
 * Основная официальная расшифровка названия библиотеки - "puzzling modules" (головоломные модули).
 * Эта расшифровка отражает основную суть понятийной базы, на которую опирается реализация модулей этой библиотеки.
 * 
 * Более нейтральная (вторая официальная) расшифровка названия библиотеки - "parsing modules" (модули для синтаксического разбора).
 * Эта расшифровка отражает основную суть главного назначения этой библиотеки на данный момент: реализация регулярных выражений и грамматик для синтаксического разбора.
 * 
 * Библиотека целиком и полностью написана на языке C++ в стандарте 11.
 * 
 * Лицензия
 * ==
 * 
 * Библиотека распространяется на условиях лицензии GNU GPLv3.
 * Текст лицензии можно найти, например, в файле LICENSE в корневой папке исходных файлов библиотеки.
 * 
 * Требования
 * ==
 * 
 * Собственно библиотека
 * --
 * 
 * Библиотека pm написана максимально независимо от чего бы то ни было.
 * Для сборки достаточно иметь компилятор C++, настроенный на стандарт хотя бы 11.
 * При этом полная поддержка стандарта не обязательна (хотя и желательна).
 * Например, компилятор gcc 4.8.5 не поддерживает стандарт 11 полностью, но под ним всё собирается как надо.
 * 
 * Сборка более ранними версиями gcc и другими компиляторами, неполностью поддерживающими стандарт 11, не гарантирована, но попробовать не запрещается: если скомпилируется, значит, работает.
 * 
 * Для более удобной сборки библиотеки желательно наличие утилиты cmake версии хотя бы 3.1.
 * 
 * Документация
 * --
 * 
 * Сборка документации к библиотеке pm осуществляется утилитой doxygen.
 * Для "полноценной" сборки документации также требуются среды dot (для генерации графов) и latex (для генерации картинок формул в документации).
 * 
 * Знакомые с утилитой doxygen могут избавиться от необходимости использования среды dot, поправив настройки, определяемые файла Doxyfile и doxygen_layout.xml в корневой папке исходных файлов библиотеки pm.
 * 
 * Список модулей
 * ==
 * 
 * Библиотека pm версии 2.0 содержит шесть модулей:
 * - \ref ModuleGrammar "Модуль грамматик".
 *  - В этом модуле реализованы средства лаконичного и наглядного описания \ref ConGrammar "грамматик" для синтаксического разбора \ref ConBaseStandardTypes "строк", \ref ConBaseStandardTypes "стандартных потоков ввода", и (особенных нестандартных) \ref ConUngettableStream "возвратных потоков" с генерацией **каких угодно** внутренних структур данных, содержащихся в \ref ConTrickyPointers "указателях на данные".
 *  - Этот модуль является одним из двух главных модулей библиотеки pm в расшифровке "parsing modules", наряду с \ref ModuleRegexp "модулем регулярных выражений".
 * - \ref ModuleRegexp "Модуль регулярных выражений".
 *  - В этом модуле реализованы средства лаконичного и наглядного описания \ref ConRegexp "регулярных выражений" для (в основном лексического, но в общем и "серьёзного" синтаксического) разбора  \ref ConBaseStandardTypes "строк", \ref ConBaseStandardTypes "стандартных потоков ввода", и (особенных нестандартных) \ref ConUngettableStream "возвратных потоков" с генерацией **каких угодно** внутренних структур данных, содержащихся в \ref ConTrickyPointers "указателях на данные".
 *  - Этот модуль является одним из двух главных модулей библиотеки pm в расшифровке "parsing modules", наряду с \ref ModuleGrammar "модулем грамматик".
 * - \ref ModuleDataset "Модуль совокупностей данных".
 *  - В этом модуле реализованы средства, используемые для генерации **каких угодно** внутренних структур данных в рамках синтаксического разбора в \ref ModuleGrammar "модуле грамматик".
 * - \ref ModuleTypeAbuse "Модуль хитрых указателей и функций над данными".
 *  - В этом модуле реализованы понятия \ref ConTrickyPointers "стабильного указателя", \ref ConTrickyPointer "указателя на данные" и спектр \ref ConDataFunctions "функций над данными", требуемые сплошь и рядом в других модулях.
 * - \ref ModuleStream "Модуль возвратных потоков".
 *  - В этом модуле реализовано понятие \ref ConUngettableStream "возвратного потока" - \ref ConStream "потока", надстраивающегося над \ref ConBaseStandardTypes "стандартным потоком ввода" и предоставляющего интерфейс чтения и возврата \ref ConBaseStandardTypes "символов и строк".
 * - \ref ModuleUtils "Модуль впомогательных средств общего плана".
 *  - Средства, предоставляемые этим модулем, вряд ли будут сильно интересны тем, кто использует библиотеку pm, но на всякий случай тоже документированы.
 * 
 * Инструкция по сборке
 * ==
 * 
 * Сборка библиотеки с помощью cmake
 * --
 * 
 * Корректность сборки проверена для утилиты cmake версий 3.5.1 и 3.5.2 и компилятора gcc/g++ версий 4.5.8 и 5.4.0.
 * Судя по документации к cmake, самая ранняя версия утилиты, для которой сборка должна производиться корректно, - 3.1.
 * 
 * Сборка библиотеки при помощью cmake производится обычным образом без всяких премудростей.
 * Главный cmake-файл располагается в корневой папке исходных файлов библиотеки.
 * Цели, порождаемые при сборке:
 * - pm
 *  - Главная цель, вся библиотека.
 * - grammar
 *  - Модуль грамматик со всеми модулями, которые могут потребоваться для построения и использования грамматик.
 *  - В данной версии библиотеки цель grammar эквивалентна цели pm.
 * - regexp
 *  - Модуль регулярных выражений, а также все модули, которые могут потребоваться для построения и использования регулярных выражений.
 *  - В данной версии библиотеки требуемые модули - это модуль возвратного потока и модуль хитрых указателей и функций над данными.
 * - dataset
 *  - Модуль совокупностей данных, а также все модули, которые могут потребоваться для построения и использования совокупностей данных.
 *  - В данной версии библиотеки требуемые модули - это модуль хитрых указателей и функций над данными.
 *  - Эта цель нужна только в том случае, если хочется полноценно использовать совокупности данных вне рамок синтаксического анализа в модуле грамматик.
 * - stream
 *  - Модуль возвратных потоков.
 *  - Эта цель нужна только в том случае, если хочется полноценно использовать возвратный поток вне рамок лексического и синтаксического анализа в модулях регулярных выражений и грамматик.
 * - type_abuse
 *  - Модуль хитрых указателей и функций над данными.
 *  - Эта цель нужна только в том случае, если понятия хитрых указателей по каким-либо причинам требуются сами по себе вне рамок использования в остальных модулях.
 * Модуль вспомогательных средств общего плана состоит только из заголовочных файлов и потому не требует сборки и не перечисляется как используемый.
 * 
 * Пошаговая инструкция по сборке в терминале Linux для пользователей, не очень знакомых с утилитой cmake:
 * - перейти в коревую папку исходных файлов библиотеки
 *     cd <папка с файлом README>
 * - создать подпапку build, если ещё не создана
 *     mkdir build
 * - перейти в подпапку build
 *     cd build
 * - сгенерировать make-файлы 
 *     cmake ..
 * - собрать библиотеку (собирается цель pm)
 *     make
 * - по необходимости собрать выбранный модуль библиотеки
 *     make pm
 *     make grammar
 *     make regexp
 *     make dataset
 *     make stream
 *     make type_abuse
 * - если всё прошло успешно, то использовать файл статической библиотеки build/lib<имя_собранной_цели>.a
 * 
 * Сборка библиотеки без помощи cmake
 * --
 * 
 * Для сборки библиотеки без утилиты cmake достаточно запустить компилятор, указав все файлы подпапки src и флаг поддержки стандарта 11 языка C++ и настроив на сборку библиотеки.
 * 
 * Сборка документации
 * --
 * 
 * Для сборки документации достаточно обычным образом применить утилиту doxygen, настроив её на просмотр всех файлов подпапок src и doc/ru.
 * Для помощи в сборке в корневой папке проекта располагаются:
 * - файл Doxygen_ru, настроенный на "красивую" сборку документации в подпапке build/doc;
 * - файл doxygen_layout.xml с настройками расположения разделов документации, используемый в настройках файла Doxygen_ru.
 * 
 * Пошаговая инструкция по сборке в терминале Linux для пользователей, не очень знакомых с утилитой doxygen:
 * - перейти в корневую папку исходных файлов библиотеки
 *     cd <папка с файлом README>
 * - создать подпапку build, если ещё не создана
 *     mkdir build
 * - запустить сборку документации
 *     doxygen Doxygen_ru
 * - если всё прошло успешно, то открыть в браузере файл build/doc/html/index.html
 * 
 * Пространства имён
 * ==
 * 
 * Всё, что реализовано в библиотеке pm, располагается в пространстве имён pm.
 * Определения каждого модуля располагаются в своём подпространстве имён:
 * - определения модуля грамматик - в подпространстве pm::grammar;
 * - определения модуля регулярных выражений - в подпространстве pm::regexp;
 * - определения модуля совокупностей данных - в подпространстве pm::dataset;
 * - определения модуля возвратных потоков - в подпространстве pm::stream;
 * - определения модуля хитрых указателей и функций над данными - в подпространстве pm::type_abuse;
 * - определения модуля вспомогательных средств общего плана - в подпространстве pm::utils.
 * 
 * Структура исходных файлов
 * ==
 * 
 * В корневой папке исходных файлов библиотеки pm располагаются:
 * - Файл README_ru с краткой выжимкой этой страницы документации.
 * - Файл LICENSE с текстом лицензии GNU GPLv3.
 * - Файл CMakeLists.txt - главный cmake-файл для сборки библиотеки.
 * - Файлы Doxyfile_ru и doxygen_layout.xml, содержащие настройки генерации документации библиотекой утилитой doxygen.
 * - Подпапка include, содержащая все подключаемые заголовочные файлы библиотеки.
 * - Подпапка src, содержащая все компилируемые файлы библиотеки.
 * - Подпапка doc, содержащая исходные файлы документации библиотеки.
 */

/*! \defgroup ModuleDataset Модуль совокупностей данных
 */

/*! \defgroup ModuleGrammar Модуль грамматик
 */

/*! \defgroup ModuleRegexp Модуль регулярных выражений
 */

/*! \defgroup ModuleStream Модуль возвратных потоков
 */

/*! \defgroup ModuleTypeAbuse Модуль хитрых указателей и функций над данными
 */

/*! \defgroup ModuleUtils Модуль вспомогательных средств общего плана
 */
