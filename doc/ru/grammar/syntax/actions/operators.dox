/*! \file include/pm/grammar/syntax/actions/operators.hpp
 *  \brief Операторный интерфейс создания \ref ConGrammar "готовых определений грамматических действий".
 *  
 *  \ingroup ModuleGrammar
 *  
 *  Описание оператора, возвращающего определение грамматического действия, содержит название возвращаемого определения.
 *  
 *  Общая рекомендация по использованию готовых определений грамматических действий: не рекомендуется создавать определения, содержащие себя прямо или косвенно в качестве подопределений, так как это может привести к **утечкам памяти**.
 */

/*! \fn Action pm::grammar::syntax::operator |(const Action & a1, const Action & a2)
 *  \brief Определение альтернативы над (\p a1, \p a2).
 */

/*! \fn Action pm::grammar::syntax::operator |(const Action & a1, Action && a2)
 *  \brief Определение альтернативы над (\p a1, \p a2).
 */

/*! \fn Action pm::grammar::syntax::operator |(Action && a1, const Action & a2)
 *  \brief Определение альтернативы над (\p a1, \p a2).
 */

/*! \fn Action pm::grammar::syntax::operator |(Action && a1, Action && a2)
 *  \brief Определение альтернативы над (\p a1, \p a2).
 */

/*! \fn Action pm::grammar::syntax::operator &(const Action & a1, const Action & a2)
 *  \brief Определение правила над (\p a1, \p a2).
 */

/*! \fn Action pm::grammar::syntax::operator &(const Action & a1, Action && a2)
 *  \brief Определение правила над (\p a1, \p a2).
 */

/*! \fn Action pm::grammar::syntax::operator &(Action && a1, const Action & a2)
 *  \brief Определение правила над (\p a1, \p a2).
 */

/*! \fn Action pm::grammar::syntax::operator &(Action && a1, Action && a2)
 *  \brief Определение правила над (\p a1, \p a2).
 */

/*! \fn Action pm::grammar::syntax::operator *(const Action & a)
 *  \brief Определение звезды Клини над \p a.
 */

/*! \fn Action pm::grammar::syntax::operator *(Action && a)
 *  \brief Определение звезды Клини над \p a.
 */

/*! \fn Action pm::grammar::syntax::operator !(const Action & a)
 *  \brief Определение опционала над \p a.
 */

/*! \fn Action pm::grammar::syntax::operator !(Action && a)
 *  \brief Определение опционала над \p a.
 */

/*! \fn Action pm::grammar::syntax::operator -(const Action & a, const dataset::syntax::Function & f_fail)
 *  \brief Определение \p a с функцией отката \p f_fail.
 */

/*! \fn Action pm::grammar::syntax::operator -(const Action & a, dataset::syntax::Function && f_fail)
 *  \brief Определение \p a с функцией отката \p f_fail.
 */

/*! \fn Action pm::grammar::syntax::operator -(Action && a, const dataset::syntax::Function & f_fail)
 *  \brief Определение \p a с функцией отката \p f_fail.
 */

/*! \fn Action pm::grammar::syntax::operator -(Action && a, dataset::syntax::Function && f_fail)
 *  \brief Определение \p a с функцией отката \p f_fail.
 */

/*! \fn grammar::syntax::Action pm::dataset::syntax::operator +(const Function & f)
 *  \brief Определение функции \p f.
 */

/*! \fn grammar::syntax::Action pm::dataset::syntax::operator +(Function && f)
 *  \brief Определение функции \p f.
 */

/*! \fn grammar::syntax::Action pm::regexp::operator >>(const Regexp & r, const std::string & data_name)
 *  \brief Определение регулярного выражения \p r с именем данных \p data_name.
 */

/*! \fn grammar::syntax::Action pm::regexp::operator >>(const Regexp & r, std::string && data_name)
 *  \brief Определение регулярного выражения \p r с именем данных \p data_name.
 */

/*! \fn grammar::syntax::Action pm::regexp::operator >>(Regexp && r, const std::string & data_name)
 *  \brief Определение регулярного выражения \p r с именем данных \p data_name.
 */

/*! \fn grammar::syntax::Action pm::regexp::operator >>(Regexp && r, std::string && data_name)
 *  \brief Определение регулярного выражения \p r с именем данных \p data_name.
 */
