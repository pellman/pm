/*! \file include/pm/regexp/subcontext/adata.hpp
 *  \brief Содержит класс \ref ConRegexp "подконтекста данных" pm::regexp::subcontext::AData.
 *  
 *  \ingroup ModuleRegexp
 */

/*! \class pm::regexp::subcontext::AData
 *  \brief Класс \ref ConRegexp "подконтекста регулярных данных".
 *  
 *  \ingroup ModuleRegexp
 *  
 *  Непосредственно содержит
 *  - два поля: стабильный указатель на флаг активности данных cact и регулярные данные cdata;
 *  - методы, позволяющие производить схожие операции над обоими полями сразу;
 *  - методы доступа к флагу и к текущим данным.
 *  
 *  С учётом вложенности полей содержит три \ref ConTrickyPointers "хитрых указателя":
 *  - указатель типа pm::type_abuse::DPtr на текущие данные: `(*this).cdata.current`;
 *  - указатель типа pm::type_abuse::DPtr на сохранённые данные: `(*this).cdata.safe`;
 *  - стабильный указатель типа pm::regexp::Activator, производного от pm::type_abuse::SPtr<bool>, на флаг активности данных: `(*this).cact`;
 *  
 *  *Этот подконтекст* - это объект, документируемый метод которого вызывается.
 *  
 *  **Запрещено** направлять указатель на флаг активности данных на объекты, тип которых отличен от `bool`.
 *  
 *  Особые свойства класса
 *  ==
 *  
 *  \ref ConBaseValidState "Нестандартно-корректен".
 *  
 *  Неявные методы
 *  ==
 *  
 *  Конструктор по умолчанию: `AData()`
 *  --
 *  
 *  Инициализировать подконтекст по умолчанию: новые пустые текущие данные, новые пустые сохранённые данные, новый опущенный флаг активности.
 *  
 *  Конструктор копирования: `AData(const AData & cadata)`
 *  --
 *  
 *  Инициализировать подконтекст, все указатели которого направлены на соответствующие данные подконтекста \p cadata.
 *  
 *  Конструктор перемещения: `AData(AData && cadata)`
 *  --
 *  
 *  Инициализировать подконтекст, все указатели которого направлены на соответствующие данные подконтекста \p cadata.
 *  
 *  Копирующее присваивание: `AData & operator =(const AData & cadata)`
 *  --
 *  
 *  Перенаправить все указатели этого подконтекста на соответствующие данные подконтекста \p cadata.
 *  
 *  Перемещающее присваивание: `AData & operator =(AData && cadata)`
 *  --
 *  
 *  Перенаправить все указатели этого подконтекста на соответствующие данные подконтекста \p cadata.
 *  
 *  Деструктор: `~AData()`
 *  --
 *  
 *  Стандартное значение.
 *  При уничтожении указателей этого подконтекста производится сборка мусора.
 */

/*! \fn void pm::regexp::subcontext::AData::detach()
 *  \brief Открепить все указатели этого подконтекста.
 *  
 *  \pre Если текущие данные этого подконтекста в момент вызова непусты, то тип этих данных копируем.
 *  \pre Если сохранённые данные этого подконтекста в момент вызова непусты, то тип этих данных копируем.
 */

/*! \fn void pm::regexp::subcontext::AData::detach_receive(const AData & cadata)
 *  \brief Открепить все указатели этого подконтекста и затем перезаписать их соответствующими указателями подконтекста \p cadata.
 *  
 *  \pre Если текущие данные подконтекста \p cadata в момент вызова непусты, то тип этих данных копируем.
 *  \pre Если сохранённые данные подконтекста \p cadata в момент вызова непусты, то тип этих данных копируем.
 */

/*! \fn void pm::regexp::subcontext::AData::detach_unset(bool act)
 *  \brief Открепить все указатели этого подконтекста и затем сбросить указатели на текущие и сохранённые данные и присвоить флагу активности значение \p act, но без фактического копирования данных при откреплении.
 */

/*! \fn void pm::regexp::subcontext::AData::activate() const
 *  \brief Активировать этот подконтекст.
 */

/*! \fn void pm::regexp::subcontext::AData::deactivate() const
 *  \brief Деактивировать этот подконтекст.
 */

/*! \fn void pm::regexp::subcontext::AData::receive(const AData & cadata) const
 *  \brief Перезаписать все указатели этого подконтекста соответствующими указателями подконтекста \p cadata.
 *  
 *  \pre Если текущие данные подконтекста \p cadata в момент вызова непусты, то тип этих данных копируем.
 *  \pre Если сохранённые данные подконтекста \p cadata в момент вызова непусты, то тип этих данных копируем.
 */

/*! \fn void pm::regexp::subcontext::AData::swap(const AData & cadata) const
 *  \brief Обменять содержимое всех указателей этого подконтекста и соответствующих указателей подконтекста \p cadata.
 */

/*! \fn void pm::regexp::subcontext::AData::unset(bool act) const
 *  \brief Сбросить указатели на текущие и сохранённые данные и присвоить флагу активации значение \p act.
 */

/*! \fn AData pm::regexp::subcontext::AData::clone() const
 *  \brief Вернуть подконтекст, указатели которого являются клонами соответствующих указателей этого подконтекста.
 *  
 *  \pre Если текущие данные этого подконтекста в момент вызова непусты, то тип этих данных копируем.
 *  \pre Если сохранённые данные этого подконтекста в момент вызова непусты, то тип этих данных копируем.
 */

/*! \fn void pm::regexp::subcontext::AData::send(const AData & cadata) const
 *  \brief Перезаписать все указатели подконтекста \p cadata соответствующими указателями этого подконтекста.
 *  
 *  \pre Если текущие данные этого подконтекста в момент вызова непусты, то тип этих данных копируем.
 *  \pre Если сохранённые данные этого подконтекста в момент вызова непусты, то тип этих данных копируем.
 */

/*! \fn bool pm::regexp::subcontext::AData::active() const
 *  \brief Вернуть `true` <=> этот подконтекст активен.
 */

/*! \fn type_abuse::DPtr & pm::regexp::subcontext::AData::data()
 *  \brief Вернуть указатель на текущие данные.
 */

/*! \fn const type_abuse::DPtr & pm::regexp::subcontext::AData::data() const
 *  \brief Вернуть указатель на текущие данные.
 */

/*! \fn bool pm::regexp::subcontext::AData::inactive() const
 *  \brief Вернуть `true` <=> этот подконтекст неактивен.
 */

/*! \fn StoredType & pm::regexp::subcontext::AData::val() const
 *  \brief Вернуть текущие данные.
 *  
 *  \pre Текущие данные в момент вызова непусты и имеют тип \p StoredType.
 */

/*! \var Activator pm::regexp::subcontext::AData::cact
 *  \brief Стабильный указатель на флаг активности данных.
 */

/*! \var Data pm::regexp::subcontext::AData::cdata
 *  \brief Регулярные данные.
 */
