/*! \file include/pm/par_system.hpp
 *  \brief Содержит класс систем парсеров pm::ParSystem.
 */

/*! \class pm::ParSystem
 *  \brief Класс систем парсеров.
 *  
 *  *Система парсеров* содержит:
 *  - *домен* - \ref DSet "множество" *имён* (\ref DTypes "строк");
 *  - для каждого имени из домена - соответствующий *внутренний* \ref pm::Parser "парсер";
 *  - *пробельный* парсер;
 *  - для каждого имени из домена - \ref DTypes "флаг" *пробельности*: флаг поднят <=> имя *пробельное*.
 *  
 *  По каждому имени (N) из домена можно извлечь *итоговый парсер*, задаваемый:
 *  - именем N;
 *  - ссылкой на содержимое системы парсеров.
 *  
 *  \ref pm::Parser::parse "(is, con)-разбор" итогового парсера с именем N и ссылкой на содержимое системы pars устроен так:
 *  - Если имя N - пробельное в pars, то последовательно до первого неуспеха выполняется (is, con)-разбор пробельным парсером системы pars.
 *  - Выполняется *главный подразбор*: (is, con)-разбор внутренним парсером системы pars с именем N.
 *  - Итог разбора равен итогу главного подразбора.
 *  
 *  При изменении содержимого системы парсеров соответственно изменяется метод разбора итогового парсера, извлечённого из этой системы.
 *  При \ref DObjectModification "уничтожении" системы парсеров метод разбора извлечённого итогового парсера фиксируется и остаётся корректным:
 *  хотя система парсеров и уничтожается, но её содержимое сохраняется при наличии ссылающихся извлечённых парсеров.
 *  
 *  Итоговые парсеры можно (и рекомендуется) использовать в качестве составных частей парсеров системы для обеспечения рекурсивных вызовов методов разбора, по аналогии с рекурсивным вызовом разборов нетерминалов в грамматиках.
 *  
 *  Особые свойства класса
 *  ==
 *  
 *  \ref DValidState "Стандартно-корректен".
 *  
 *  Неявные методы
 *  ==
 *  
 *      ParSet()
 *  
 *  Инициализировать систему парсеров с пустым доменом и пробельным парсером \ref CPfalse "Неуспех".
 *  
 *  
 *      ParSet(const ParSet &)
 *  
 *  Удалён.
 *  
 *  
 *      ParSet(ParSet && pars)
 *  
 *  Инициализировать систему парсеров, переместив в неё содержимое системы \p pars.
 *  
 *  Ссылка на содержимое, перемещённое из \p pars, остаётся прежней.
 *  В частности, итоговые парсеры, извлечённые из \p pars, становятся извлечёнными из инициализированной системы.
 *  
 *  \p pars становится системой парсеров с новым содержимым, инициализированным по умолчанию (пустой домен, пробельный парсер \ref CPfalse "Неуспех").
 *  
 *  
 *      ParSet & operator =(const ParSet &)
 *  
 *  Удалено.
 *  
 *  
 *      ParSet & operator =(ParSet && pars)
 *  
 *  Перезаписать содержимое \ref DSelf "self", переместив в него содержимое системы \p pars.
 *  
 *  Итоговые парсеры, извлечённые из self, ведут себя так же, как если бы система self была уничтожена перед присваиванием.
 *  
 *  Ссылка на содержимое, перемещённое из \p pars, остаётся прежней.
 *  В частности, итоговые парсеры, извлечённые из \p pars, становятся извлечёнными из self.
 *  
 *  \p pars становится системой парсеров с новым содержимым, инициализированным по умолчанию (пустой домен, пробельный парсер \ref CPfalse "Неуспех").
 *  
 *  \return Self.
 *  
 *  
 *      ~ParSet()
 *  
 *  Уничтожить систему парсеров.
 *  Методы разбора извлечённых итоговых парсеров фиксируются и остаются корректными.
 */

/*! \fn Parser & pm::ParSystem::skipped(const std::string & name)
 *  \brief Вернуть ссылку на парсер с пробельным именем \p name.
 *  
 *  Если в домене нет имени \p name, то оно добавляется, и ему сопоставляется парсер \ref CPfalse "Неуспех".
 *  
 *  Имя \p name помечается как пробельное (даже если до этого было непробельным).
 */

/*! \fn Parser & pm::ParSystem::skipped(std::string && name)
 *  \brief Вернуть ссылку на парсер с пробельным именем \p name.
 *  
 *  Если в домене нет имени \p name, то оно добавляется, и ему сопоставляется парсер \ref CPfalse "Неуспех".
 *  
 *  Имя \p name в любом случае помечается как пробельное (даже если до этого было непробельным).
 */

/*! \fn Parser & pm::ParSystem::unskipped(const std::string & name)
 *  \brief Вернуть ссылку на парсер с непробельным именем \p name.
 *  
 *  Если в домене нет имени \p name, то оно добавляется, и ему сопоставляется парсер \ref CPfalse "Неуспех".
 *  
 *  Имя \p name в любом случае помечается как непробельное (даже если до этого было пробельным).
 */

/*! \fn Parser & pm::ParSystem::unskipped(std::string && name)
 *  \brief Вернуть ссылку на парсер с непробельным именем \p name.
 *  
 *  Если в домене нет имени \p name, то оно добавляется, и ему сопоставляется парсер \ref CPfalse "Неуспех".
 *  
 *  Имя \p name в любом случае помечается как непробельное (даже если до этого было пробельным).
 */

/*! \fn Parser & pm::ParSystem::action(const std::string & name, bool skip_hint = false)
 *  \brief Вернуть ссылку на парсер с именем \p name.
 *  
 *  Если в домене нет имени \p name, то оно добавляется, и ему
 *  - сопоставляется парсер \ref CPfalse "Неуспех" и
 *  - присваивается флаг пробельности \p skip_hint.
 */

/*! \fn Parser & pm::ParSystem::action(std::string && name, bool skip_hint = false)
 *  \brief Вернуть ссылку на парсер с пробельным именем \p name.
 *  
 *  Если в домене нет имени \p name, то оно добавляется, и ему
 *  - сопоставляется парсер \ref CPfalse "Неуспех" и
 *  - присваивается флаг пробельности \p skip_hint.
 */

/*! \fn Parser & pm::ParSystem::skip()
 *  \brief Вернуть ссылку на пробельный парсер.
 */

/*! \fn Parser pm::ParSystem::parser(const std::string & name, bool skip_hint = false)
 *  \brief Извлечь и вернуть итоговый парсер с именем \p name.
 *  
 *  Если в домене нет имени \p name, то оно добавляется, и ему
 *  - сопоставляется парсер \ref CPfalse "Неуспех" и
 *  - присваивается флаг пробельности \p skip_hint.
 */

/*! \fn Parser pm::ParSystem::parser(std::string && name, bool skip_hint = false)
 *  \brief Извлечь и вернуть итоговый парсер с именем \p name.
 *  
 *  Если в домене нет имени \p name, то оно добавляется, и ему
 *  - сопоставляется парсер \ref CPfalse "Неуспех" и
 *  - присваивается флаг пробельности \p skip_hint.
 */
